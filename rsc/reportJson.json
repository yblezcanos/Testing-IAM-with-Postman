{
  "collection": {
    "_": {
      "postman_id": "f94aa40c-6329-488f-9d27-829bfe01f62e",
      "exporter_id": "36701025"
    },
    "item": [
      {
        "id": "62f2a6ab-bca3-4960-b3d4-44536ed7627b",
        "name": "event",
        "item": [
          {
            "id": "65768dab-3a2e-42f9-872b-84cb204527db",
            "name": "[Create]/v1/event",
            "request": {
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5b581a11-ccd3-454e-9815-405b2428a9f6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('id');\r",
                    "    let eventId = jsonData.id;\r",
                    "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                    "    //console.log(\"eventId: \"+ eventId);\r",
                    "    pm.expect(eventId).to.not.be.null;\r",
                    "    pm.expect(eventId).to.not.be.undefined;\r",
                    "});\r",
                    "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('name');\r",
                    "    let name = jsonData.name;\r",
                    "    pm.collectionVariables.set(\"name\", name);\r",
                    "    pm.expect(name).to.not.be.empty;\r",
                    "});\r",
                    "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('updated_at');\r",
                    "    let updatedAt = jsonData.updated_at;\r",
                    "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                    "    pm.expect(updatedAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('created_at');\r",
                    "    let createdAt = jsonData.created_at;\r",
                    "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                    "    pm.expect(createdAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Extract and store ID\", function () {\r",
                    "    let scope = pm.collectionVariables;\r",
                    "    let keyName = \"iam_events_ids\";\r",
                    "    let jsonData = pm.response.json();\r",
                    "    \r",
                    "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                    "    pm.expect(jsonData.id).to.not.be.null;\r",
                    "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                    "    if(jsonData.id != null & jsonData.id != undefined )\r",
                    "    {\r",
                    "    resourceIds.push(jsonData.id);\r",
                    "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        resourceIds = resourceIds;\r",
                    "    }\r",
                    "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "0990a7d6-1fd6-4a34-846d-f5a0b34b9edc"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "73df5ef9-7b24-4ebc-b3dd-7225e418f061",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9274e3cc-1f0e-4e9d-8dae-4d880c012661"
                }
              }
            ]
          },
          {
            "id": "19d35e9e-09bc-4d5d-b70e-e36bbd5c2469",
            "name": "[List]/v1/event",
            "request": {
              "description": {
                "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c04ff0a2-3342-424d-b746-62ae6f8a1f21",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "",
                    "/*// Obtener la respuesta en formato JSON",
                    "let jsonResponse = pm.response.json();",
                    "",
                    "// Obtener los IDs de la respuesta (ajusta el acceso según la estructura de tu respuesta)",
                    "let responseIds = jsonResponse.data.map(item => item.id); // Suponiendo que cada item tiene una propiedad `id`",
                    "console.log(\"ids obtenidos\" + responseIds);",
                    "",
                    "// Obtener los IDs esperados desde la variable de colección",
                    "let expectedIds = JSON.parse(pm.collectionVariables.get(\"iam_events_ids\"));",
                    "console.log(\"id almacenados\" + expectedIds);",
                    "",
                    "// Verificar que todos los IDs esperados estén contenidos en los IDs de la respuesta",
                    "let allIdsPresent = expectedIds.every(id => responseIds.includes(id));",
                    "console.log(\"allIdsPresent\" + allIdsPresent);",
                    "",
                    "// Prueba para asegurar que todos los IDs esperados están en la respuesta",
                    "pm.test(\"All expected IDs are in the response\", function() {",
                    "    pm.expect(allIdsPresent).to.be.true;",
                    "});",
                    "",
                    "// Imprimir un mensaje en la consola para mayor claridad (opcional)",
                    "if (!allIdsPresent) {",
                    "    console.log(\"IDs faltantes:\", expectedIds.filter(id => !responseIds.includes(id)));",
                    "}*/"
                  ],
                  "_lastExecutionId": "f9117f4e-222b-467a-b442-40fa764aa997"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b33758b-3c4f-4768-8d36-92928fbfe73b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ca1347c-40b5-4a84-97c3-95238befee91"
                }
              }
            ]
          },
          {
            "id": "2cf5a5af-baf3-4e36-8e2d-22dd30b24bba",
            "name": "[List :id]/v1/event/:id",
            "request": {
              "description": {
                "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event",
                  "{{eventId}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "format",
                    "value": "full"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c0173818-e185-460a-9899-dd66fdd16d1f",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Verifying Name is the created one\", function () {",
                    "    let jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    let currentName = jsonData.name;",
                    "    pm.expect(currentName).to.be.an('string');",
                    "    pm.expect(currentName.length > 1).eq(true);",
                    "    let expectedName = pm.collectionVariables.get(\"name\");",
                    "    pm.expect(currentName).to.eql(expectedName);",
                    "    //console.log(\"Current value is \"+currentName+ \" and the expected value is \"+ expectedName)",
                    "});",
                    "",
                    "pm.test(\"Verifying Id is the created one\", function () {",
                    "    let jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "    let currentID = jsonData.id;",
                    "    pm.expect(currentID).to.not.be.null;",
                    "    pm.expect(currentID).to.not.be.undefined;",
                    "    let expectedId = pm.collectionVariables.get(\"eventId\");",
                    "    pm.expect(currentID).to.eql(expectedId);",
                    "    //console.log(\"Current id is \"+currentID+ \" and the expected id is \"+ expectedId);",
                    "});",
                    "",
                    "pm.test(\"Verifying created_at is the created one\", function () {",
                    "    let jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('created_at');",
                    "    let currentCreatedAt = new Date(jsonData.created_at).toISOString().slice(0, 19) + 'Z';",
                    "    let iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
                    "    pm.expect(currentCreatedAt).to.match(iso8601Regex);",
                    "    let expectedCreatedAt = pm.collectionVariables.get(\"createdAt\");",
                    "    expectedCreatedAt = new Date(expectedCreatedAt).toISOString().slice(0, 19) + 'Z';",
                    "    pm.expect(currentCreatedAt).to.eql(expectedCreatedAt);",
                    "});",
                    "",
                    "pm.test(\"Verifying updated_at is the created one\", function () {",
                    "    let jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('updated_at');",
                    "    let currentUpdatedAt = new Date(jsonData.updated_at).toISOString().slice(0, 19) + 'Z';",
                    "    //console.log(\"obtenida\" + currentUpdatedAt);",
                    "    let expectedUpdatedAt = pm.collectionVariables.get(\"updatedAt\");",
                    "    expectedUpdatedAt = new Date(expectedUpdatedAt).toISOString().slice(0, 19) + 'Z';",
                    "    //console.log(\"esperada\" + expectedUpdatedAt);",
                    "    pm.expect(currentUpdatedAt).to.eql(expectedUpdatedAt);",
                    "    //console.log(\"Current updated_at is \"+currentUpdatedAt+ \" and the expected updated_at is \"+ expectedUpdatedAt);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "32975165-c381-4388-b04e-73a7c074b546"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "17391256-b774-4945-936f-2945fe9a4e61",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "6fab15ae-26f4-4c3d-af54-875954946d6e"
                }
              }
            ]
          },
          {
            "id": "18660602-23e9-4fd9-b5d7-96965feb32cf",
            "name": "[Update :id]/v1/event/:id",
            "request": {
              "description": {
                "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event",
                  "{{eventId}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "format",
                    "value": "full"
                  }
                ],
                "variable": []
              },
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "\n{\n  \"name\": \"update put:id\",\n  \"description\": \"The authentication process fails\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"{{$randomDateFuture}}\",\n  \"group\": \"user\"\n}\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0e694deb-d70a-4d83-8043-4821d46cb26c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Successful PUT request\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"updated_at was updated correctly\", function () {",
                    "    let jsonData = pm.response.json();",
                    "    let newUpdatedAtS = jsonData.updated_at;",
                    "    let newUpdatedAt = new Date(newUpdatedAtS);",
                    "    //console.log(\"newUpdatedAt \"+newUpdatedAt);",
                    "    let updatedAtS = pm.collectionVariables.get(\"updatedAt\");",
                    "    let updatedAt = new Date(updatedAtS);",
                    "    //console.log(\"updatedAt \"+updatedAt);",
                    "    pm.expect(updatedAt.getTime()).to.be.lessThan(newUpdatedAt.getTime());",
                    "    //pm.expect(newUpdatedAt).to.not.be.eql(updatedAt);",
                    "});",
                    "",
                    "pm.test(\"Name was updated correctly\", function () {",
                    "    let jsonData = pm.response.json();",
                    "    let newName = jsonData.name;",
                    "    let collLastName = pm.collectionVariables.get(\"name\");",
                    "    pm.expect(newName).to.not.be.eql(collLastName);",
                    "    //console.log(\"New last name is \"+newName+\" and Old last name is \"+collLastName);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "243c3be9-ff5c-4ee8-abe3-115f81e87ef5"
                }
              }
            ]
          },
          {
            "id": "c8969862-3e12-494e-a4ac-97f6513ce2c0",
            "name": "[DELETE :id]/v1/event/:id",
            "request": {
              "description": {
                "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event",
                  "{{eventId}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fc3e5fd3-fe19-48f8-b730-6b18b4717da2",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Dynamic delete action for existent target with status code is 200\", function () {",
                    "    if(pm.response.responseSize) {",
                    "        let jsonData = pm.response.json(); ",
                    "        let id = pm.collectionVariables.get(\"eventId\");",
                    "",
                    "        pm.response.to.have.status(200);",
                    "        ",
                    "        pm.expect(jsonData).to.be.an('object');",
                    "        pm.expect(jsonData.id).eq(id);",
                    "        pm.expect(jsonData.name).to.be.an('string');",
                    "        pm.expect(jsonData.description).to.be.an('string');",
                    "        pm.expect(jsonData.description.length > 1).eq(true);",
                    "        pm.expect(jsonData.description).to.not.be.empty;",
                    "    }else{",
                    "        pm.expect(pm.response.code).to.not.equal(200);",
                    "    }",
                    "});",
                    "",
                    "pm.test(\"Dynamic delete action for not existent target with status code 404\", function () {",
                    "    if(!pm.response.responseSize) {",
                    "        pm.response.to.have.status(404);",
                    "    }else{",
                    "        pm.expect(pm.response.code).to.not.equal(404);",
                    "    }",
                    "});",
                    "",
                    "if(pm.response.responseSize) {",
                    "    let jsonData = pm.response.json(); ",
                    "    if(jsonData) {",
                    "        let iam_events_ids = pm.collectionVariables.get(\"iam_events_ids\");",
                    "        let list = JSON.parse(iam_events_ids);",
                    "        delete_id = jsonData.id;",
                    "        let res = list.filter(item => item != delete_id);",
                    "        iam_events_ids= JSON.stringify(res);",
                    "        pm.collectionVariables.set(\"iam_events_ids\", iam_events_ids);",
                    "    }",
                    "}",
                    "       ",
                    "",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "6e3a2577-ab0b-429c-9001-16c2e827b17d"
                }
              }
            ]
          },
          {
            "id": "8ff7dbb1-8dc0-4eb8-9ff1-108210981b0f",
            "name": "[Delete 404]/v1/event/:id",
            "request": {
              "description": {
                "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event",
                  "99999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f71cd2a7-145c-43b1-99fa-556d979eb7fd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Static delete action for not existent target with status code 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});"
                  ],
                  "_lastExecutionId": "3e0494b5-9c92-43ad-b367-d1c0dd948ae7"
                }
              }
            ]
          },
          {
            "id": "e2e945a8-49de-49e1-bc92-57f524f03dff",
            "name": "[Get id deleted]/v1/event/:id",
            "request": {
              "description": {
                "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event",
                  "{{eventId}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5aeff82a-f4c7-4eef-82f7-4dccb9be94f9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "bfc3ef04-b30f-477f-93f2-0b944a894406"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "2ba25887-9888-48bb-a07c-60540002df1b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "fe9acf99-c7c6-491b-9955-ca34f7534034"
                }
              }
            ]
          },
          {
            "id": "c3e3e7a5-7460-47c1-8da5-8464a1cb6624",
            "name": "[Create 1]/v1/event",
            "request": {
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"test1\",\r\n  \"description\": \"Test1\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "69a1834a-a0dd-4dc7-a287-a406e3d73603",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('id');\r",
                    "    let eventId = jsonData.id;\r",
                    "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                    "    //console.log(\"eventId: \"+ eventId);\r",
                    "    pm.expect(eventId).to.not.be.null;\r",
                    "    pm.expect(eventId).to.not.be.undefined;\r",
                    "});\r",
                    "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('name');\r",
                    "    let name = jsonData.name;\r",
                    "    pm.collectionVariables.set(\"name\", name);\r",
                    "    pm.expect(name).to.not.be.empty;\r",
                    "});\r",
                    "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('updated_at');\r",
                    "    let updatedAt = jsonData.updated_at;\r",
                    "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                    "    pm.expect(updatedAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('created_at');\r",
                    "    let createdAt = jsonData.created_at;\r",
                    "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                    "    pm.expect(createdAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Extract and store ID\", function () {\r",
                    "    let scope = pm.collectionVariables;\r",
                    "    let keyName = \"iam_events_ids\";\r",
                    "    let jsonData = pm.response.json();\r",
                    "    \r",
                    "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                    "    pm.expect(jsonData.id).to.not.be.null;\r",
                    "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                    "    if(jsonData.id != null & jsonData.id != undefined )\r",
                    "    {\r",
                    "    resourceIds.push(jsonData.id);\r",
                    "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        resourceIds = resourceIds;\r",
                    "    }\r",
                    "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "5562da3f-9cf3-4862-ba06-cea9c1babfad"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3ee5c60-ab59-4a16-b719-78fa64b7f928",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d04528c9-3f9f-4efb-aa56-652eaa3bc01b"
                }
              }
            ]
          },
          {
            "id": "3d093537-4214-4e0e-8481-ae9986f02274",
            "name": "[Create 2]/v1/event",
            "request": {
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "55c640c7-175f-4e7f-a1ae-809d814295e8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('id');\r",
                    "    let eventId = jsonData.id;\r",
                    "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                    "    //console.log(\"eventId: \"+ eventId);\r",
                    "    pm.expect(eventId).to.not.be.null;\r",
                    "    pm.expect(eventId).to.not.be.undefined;\r",
                    "});\r",
                    "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('name');\r",
                    "    let name = jsonData.name;\r",
                    "    pm.collectionVariables.set(\"name\", name);\r",
                    "    pm.expect(name).to.not.be.empty;\r",
                    "});\r",
                    "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('updated_at');\r",
                    "    let updatedAt = jsonData.updated_at;\r",
                    "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                    "    pm.expect(updatedAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('created_at');\r",
                    "    let createdAt = jsonData.created_at;\r",
                    "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                    "    pm.expect(createdAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Extract and store ID\", function () {\r",
                    "    let scope = pm.collectionVariables;\r",
                    "    let keyName = \"iam_events_ids\";\r",
                    "    let jsonData = pm.response.json();\r",
                    "    \r",
                    "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                    "    pm.expect(jsonData.id).to.not.be.null;\r",
                    "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                    "    if(jsonData.id != null & jsonData.id != undefined )\r",
                    "    {\r",
                    "    resourceIds.push(jsonData.id);\r",
                    "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        resourceIds = resourceIds;\r",
                    "    }\r",
                    "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "869495e9-1bb0-4b1c-b4d9-0766b62b815d"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "930e3831-8f2d-431d-aafc-2f975cb37ae8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37415257-9e9d-477d-a12a-541682642d5d"
                }
              }
            ]
          },
          {
            "id": "a92ccdb2-24f3-40de-a102-f5a8590578dc",
            "name": "[Create 3]/v1/event",
            "request": {
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "431f4737-8b83-467c-b7f9-95d14c4ca141",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('id');\r",
                    "    let eventId = jsonData.id;\r",
                    "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                    "    //console.log(\"eventId: \"+ eventId);\r",
                    "    pm.expect(eventId).to.not.be.null;\r",
                    "    pm.expect(eventId).to.not.be.undefined;\r",
                    "});\r",
                    "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('name');\r",
                    "    let name = jsonData.name;\r",
                    "    pm.collectionVariables.set(\"name\", name);\r",
                    "    pm.expect(name).to.not.be.empty;\r",
                    "});\r",
                    "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('updated_at');\r",
                    "    let updatedAt = jsonData.updated_at;\r",
                    "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                    "    pm.expect(updatedAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('created_at');\r",
                    "    let createdAt = jsonData.created_at;\r",
                    "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                    "    pm.expect(createdAt).to.not.be.empty;\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Extract and store ID\", function () {\r",
                    "    let scope = pm.collectionVariables;\r",
                    "    let keyName = \"iam_events_ids\";\r",
                    "    let jsonData = pm.response.json();\r",
                    "    \r",
                    "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                    "    pm.expect(jsonData.id).to.not.be.null;\r",
                    "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                    "    if(jsonData.id != null & jsonData.id != undefined )\r",
                    "    {\r",
                    "    resourceIds.push(jsonData.id);\r",
                    "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        resourceIds = resourceIds;\r",
                    "    }\r",
                    "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "4c1caf31-7328-4661-80fa-0dbd91acf9a8"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "74f93201-ed4d-4a3c-af8c-833390dbcb2a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "537f2922-5a49-4888-bd06-863eeb77474b"
                }
              }
            ]
          },
          {
            "id": "9076a1e6-0923-4d0c-9324-abeb5d6e0785",
            "name": "[Update :list]/v1/event",
            "request": {
              "description": {
                "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "ql",
                    "value": "{\"id\":{\"in\":{{iam_events_ids}}}}"
                  }
                ],
                "variable": []
              },
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "\n{\n  \"name\": \"OnlineTest\",\n  \"description\": \"Bulk action\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"2024-04-19 06:19:50\",\n  \"group\": \"user\"\n}\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d55226f0-2464-4b4e-872e-88b23b6edf90",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Verifying that the names has been updated\", function () {",
                    "    if (!pm.response.responseSize) return null;",
                    "    let jsonData = pm.response.json();",
                    "    if (!jsonData) return null;",
                    "    let requestBody = pm.collectionVariables.get(\"requestBodyPut\");",
                    "    let requestBodyJson = requestBody ? JSON.parse(requestBody) : null;",
                    "    let responseName = jsonData.data.map(item => item.name);",
                    "    //console.log(\"responseName\" + responseName);",
                    "    let requestName = requestBodyJson.name",
                    "    //console.log(\"Name response\" + responseName);",
                    "    //console.log(\"Name request\" + requestName);",
                    "    let allNamesMatch = responseName.every(name => name === requestName);",
                    "    pm.expect(allNamesMatch).to.be.true;  ",
                    "});",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "   ",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "e01cbacb-ea45-45a4-b7c2-1cb785cf7b1b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "50c10a6b-e063-48b2-8a63-c076c06271f8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Obtener el body del request como un objeto\r",
                    "let requestBodyPut = pm.request.body.raw;\r",
                    "\r",
                    "// Almacenar el body en una variable de entorno (como JSON string)\r",
                    "pm.collectionVariables.set(\"requestBodyPut\", requestBodyPut);\r",
                    "\r",
                    "\r",
                    "/*let uri = pm.collectionVariables.get('base_url')\r",
                    "pm.sendRequest({\r",
                    "    url: uri + '/v1/event',\r",
                    "    method: 'POST',\r",
                    "    header: {\r",
                    "        'Content-Type': 'application/x-www-form-urlencoded'\r",
                    "    },\r",
                    "    body: {\r",
                    "        mode: 'raw',\r",
                    "        raw: JSON.stringify({\r",
                    "            \"name\": \"test3\",\r",
                    "            \"description\": \"Test3\",\r",
                    "            \"payload\": { \"name\":\"test\"},\r",
                    "            \"status\": 1,\r",
                    "            \"group\": \"user\"\r",
                    "        })\r",
                    "    }\r",
                    "}, function (err, res) {\r",
                    "    console.log(\">>> CREATE_\");\r",
                    "    if (!res?.responseSize) return null;\r",
                    "    let jsonData = res.json();\r",
                    "    if (!jsonData) return null;\r",
                    "    jsonData?.id && pm.collectionVariables.set(\"eventId\", jsonData.id);\r",
                    "});*/\r",
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "85bdc3ba-23f6-444d-9772-f8fcc84e6b05"
                }
              }
            ]
          },
          {
            "id": "2521643c-0ee9-46e4-adaa-fd6484e4dad8",
            "name": "[Delete :list]/v1/event",
            "request": {
              "description": {
                "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "ql",
                    "value": "{\"id\":{\"in\":{{iam_events_ids}}}}"
                  }
                ],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "32a8b7a3-56fc-4ed3-bccb-553a1d549a55",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "(()=>{",
                    "    if (!pm.response.responseSize) return null;",
                    "    let jsonData = pm.response.json();",
                    "    if (!jsonData) return null;",
                    "    let iam_events_ids = pm.collectionVariables.get(\"iam_events_ids\");",
                    "    let list = iam_events_ids ? JSON.parse(iam_events_ids) : null;",
                    "    if (!Array.isArray(list) || !list.length) return null;",
                    "    let ids = jsonData.data.map(item => item.id);",
                    "    let res = list.filter(item => !ids.includes(item));",
                    "    let values = JSON.stringify(res);",
                    "    pm.collectionVariables.set(\"iam_events_ids\", values);",
                    "})()",
                    ""
                  ],
                  "_lastExecutionId": "1a48e462-5958-4756-8070-2b53b0fae442"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4db8e55-e0d5-494e-92b8-a7959a66dea0",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d45bb573-fd68-4e6b-9047-9e5112f4d137"
                }
              }
            ]
          },
          {
            "id": "5c3082d6-6afe-4402-a064-9d4804694206",
            "name": "[Cloned]/v1/event/:id",
            "request": {
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "event",
                  "{{eventId}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"clonadoNewName\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ebd8c356-f3fd-47d0-b99d-ccd23ad3692d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"event name was cloned correctly\", function () {\r",
                    "    if (!pm.response.responseSize) return null;\r",
                    "\r",
                    "    let jsonData = pm.response.json();\r",
                    "    if (!jsonData) return null;\r",
                    "\r",
                    "    // Obtener el cuerpo de la solicitud\r",
                    "    let requestBody = pm.collectionVariables.get(\"requestBodyPost\");\r",
                    "\r",
                    "    // Verificar si requestBody es una cadena vacía o nula\r",
                    "    if (!requestBody || requestBody.trim() === \"\") {\r",
                    "        requestBody = null;\r",
                    "    }\r",
                    "\r",
                    "    let requestBodyJson = requestBody ? JSON.parse(requestBody) : null;\r",
                    "\r",
                    "    // Obtener las nome de la respuesta, la colección, y el cuerpo de la solicitud\r",
                    "    let cloneName = jsonData.name;\r",
                    "\r",
                    "    let originName = pm.collectionVariables.get(\"name\");\r",
                    "\r",
                    "    let requestName = requestBodyJson ? requestBodyJson.name: null;\r",
                    "\r",
                    "    // Comparar los nombres según el caso\r",
                    "    if (!requestName) {\r",
                    "        pm.expect(cloneName).to.be.eql(originName);\r",
                    "    } else {\r",
                    "        pm.expect(cloneName).to.be.eql(requestName);\r",
                    "    }\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "750a2a00-f90c-4a45-95f0-0d3a22304b62"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "11a7403f-7e93-4f7b-bff3-2bd90d584633",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Obtener el body del request como un objeto\r",
                    "let requestBodyPost = pm.request.body.raw;\r",
                    "\r",
                    "// Almacenar el body en una variable de entorno (como JSON string)\r",
                    "pm.collectionVariables.set(\"requestBodyPost\", requestBodyPost);"
                  ],
                  "_lastExecutionId": "162dd2b8-37ae-4d2a-9840-5992845761e8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b41f2c73-9f99-4f32-ac0a-eecccaee2f07",
        "name": "action",
        "item": [],
        "event": []
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{access_token}}",
          "key": "token"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "bed2cf0d-e428-4f65-8b7f-0db13c302be3",
          "type": "text/javascript",
          "exec": [
            "let keyName = \"iam_events_ids\";\r",
            "pm.collectionVariables.set(keyName, pm.collectionVariables.get(keyName) || \"[]\");\r",
            "\r",
            "let uri = pm.environment.get('base_url')\r",
            "//console.log(\"111111\" + uri)\r",
            "pm.sendRequest({\r",
            "    url: uri + '/v1/oauth/token',\r",
            "    method: 'POST',\r",
            "    header: {\r",
            "        'Content-Type': 'application/x-www-form-urlencoded'\r",
            "    },\r",
            "    body: {\r",
            "        mode: \"urlencoded\",\r",
            "        urlencoded: [\r",
            "            { key: \"grant_type\", value: \"password\" },\r",
            "            { key: \"username\", value: pm.environment.get('user') },\r",
            "            { key: \"password\", value: pm.environment.get('pass') },\r",
            "            { key: \"scope\", value: \"6\"}\r",
            "        ]\r",
            "    }\r",
            "}, function (err, res) {\r",
            "    //console.log(\">>> ACCESS-TOKEN\");\r",
            "    if (!res?.responseSize) return null;\r",
            "    let jsonData = res.json();\r",
            "    if (!jsonData) return null;\r",
            "    jsonData?.access_token && pm.environment.set(\"access_token\", jsonData.access_token);\r",
            "    /*console.log(\">>> error\", err);\r",
            "    onsole.log(\">>> access_token-v\", pm.collectionVariables.get('access_token'));\r",
            "    onsole.log(\">>> access_token-l\", jsonData?.access_token);*/\r",
            "});"
          ],
          "_lastExecutionId": "34d996f0-d74f-49fd-b1ef-55a089d3a39a"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "948afc9e-14ad-43da-9f46-3f9de450eba3",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "1345a425-baa0-4cb7-92bd-cf20bf499c80"
        }
      }
    ],
    "variable": [
      {
        "disabled": true,
        "type": "any",
        "value": "https://auth-dev.qa.ewas.aero",
        "key": "base_url"
      },
      {
        "disabled": true,
        "type": "string",
        "value": "amembrides",
        "key": "user"
      },
      {
        "disabled": true,
        "type": "string",
        "value": "Zaqwsx-123456",
        "key": "pass"
      },
      {
        "type": "any",
        "value": "",
        "key": "eventId"
      },
      {
        "type": "any",
        "value": "",
        "key": "name"
      },
      {
        "type": "any",
        "value": "",
        "key": "updatedAt"
      },
      {
        "type": "any",
        "value": "\n{\n  \"name\": \"OnlineTest\",\n  \"description\": \"Bulk action\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"2024-04-19 06:19:50\",\n  \"group\": \"user\"\n}\n",
        "key": "requestBody"
      },
      {
        "type": "any",
        "value": "",
        "key": "iam_events_ids"
      },
      {
        "type": "any",
        "value": "",
        "key": "createdAt"
      },
      {
        "type": "any",
        "value": "",
        "key": "requestBodyPut"
      },
      {
        "type": "any",
        "value": "",
        "key": "requestBodyPost"
      },
      {
        "disabled": true,
        "type": "any",
        "value": "",
        "key": "access_token"
      }
    ],
    "info": {
      "_postman_id": "f94aa40c-6329-488f-9d27-829bfe01f62e",
      "name": "IAM",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2024-08-10T17:43:45.415Z",
      "postman_exported_using": "Postman/11.7.0"
    },
    "id": "2e6c5349-3c40-4124-a86f-105308ffbb5d",
    "name": "IAM",
    "values": [
      {
        "type": "any",
        "value": "https://auth-dev.qa.ewas.aero",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "amembrides",
        "key": "user"
      },
      {
        "type": "any",
        "value": "Zaqwsx-123456",
        "key": "pass"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTUyODAxNyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NSwiZXhwIjoxNzIzNzUzMzU1fQ.2zl4h3mnhxjcXR1mjiKvIgVjJ_Ue9e61cZtNgOV0yV0",
        "key": "access_token"
      }
    ]
  },
  "globals": {
    "id": "3428329a-4999-445f-ac3b-a9386bdcffa2",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 42,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 23,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 395.1923076923077,
      "responseMin": 144,
      "responseMax": 1291,
      "responseSd": 309.59502321963595,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1723321344132,
      "completed": 1723321356162
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "32a80a36-2e80-45ec-aab8-bc3b9b1edfdc",
          "httpRequestId": "d9db5062-3d5d-42a3-a7a0-35f7e463508e"
        },
        "item": {
          "id": "65768dab-3a2e-42f9-872b-84cb204527db",
          "name": "[Create]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b581a11-ccd3-454e-9815-405b2428a9f6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0990a7d6-1fd6-4a34-846d-f5a0b34b9edc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "73df5ef9-7b24-4ebc-b3dd-7225e418f061",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9274e3cc-1f0e-4e9d-8dae-4d880c012661"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDQyNzIxMyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NCwiZXhwIjoxNzIzNzUzMzQ0fQ.qUJUhXlQ4z_TVDW320aWm8BEyzvUhm39UVII4NF9I_0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48c5bc39-86d3-47cf-b1b6-10282985657f",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDQyNzIxMyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NCwiZXhwIjoxNzIzNzUzMzQ0fQ.qUJUhXlQ4z_TVDW320aWm8BEyzvUhm39UVII4NF9I_0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cd7af37e-bae6-4ced-a2f8-dbe49a4e7785",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:25 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-mDP1qUMiix020sjAYXaxEulPUp8\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              50,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              50,
              51,
              52,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 345,
          "responseSize": 183
        },
        "id": "65768dab-3a2e-42f9-872b-84cb204527db",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "32a80a36-2e80-45ec-aab8-bc3b9b1edfdc",
          "httpRequestId": "d9db5062-3d5d-42a3-a7a0-35f7e463508e"
        },
        "item": {
          "id": "65768dab-3a2e-42f9-872b-84cb204527db",
          "name": "[Create]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b581a11-ccd3-454e-9815-405b2428a9f6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0990a7d6-1fd6-4a34-846d-f5a0b34b9edc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "73df5ef9-7b24-4ebc-b3dd-7225e418f061",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9274e3cc-1f0e-4e9d-8dae-4d880c012661"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDQyNzIxMyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NCwiZXhwIjoxNzIzNzUzMzQ0fQ.qUJUhXlQ4z_TVDW320aWm8BEyzvUhm39UVII4NF9I_0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48c5bc39-86d3-47cf-b1b6-10282985657f",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDQyNzIxMyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NCwiZXhwIjoxNzIzNzUzMzQ0fQ.qUJUhXlQ4z_TVDW320aWm8BEyzvUhm39UVII4NF9I_0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cd7af37e-bae6-4ced-a2f8-dbe49a4e7785",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:25 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-mDP1qUMiix020sjAYXaxEulPUp8\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              50,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              50,
              51,
              52,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 345,
          "responseSize": 183
        },
        "id": "65768dab-3a2e-42f9-872b-84cb204527db",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "04c50257-a825-4f0c-85cf-90ea9a271cf7",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c322a56f-dad8-4edd-bc5d-32ed596ffae8"
        },
        "item": {
          "id": "19d35e9e-09bc-4d5d-b70e-e36bbd5c2469",
          "name": "[List]/v1/event",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c04ff0a2-3342-424d-b746-62ae6f8a1f21",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "/*// Obtener la respuesta en formato JSON",
                  "let jsonResponse = pm.response.json();",
                  "",
                  "// Obtener los IDs de la respuesta (ajusta el acceso según la estructura de tu respuesta)",
                  "let responseIds = jsonResponse.data.map(item => item.id); // Suponiendo que cada item tiene una propiedad `id`",
                  "console.log(\"ids obtenidos\" + responseIds);",
                  "",
                  "// Obtener los IDs esperados desde la variable de colección",
                  "let expectedIds = JSON.parse(pm.collectionVariables.get(\"iam_events_ids\"));",
                  "console.log(\"id almacenados\" + expectedIds);",
                  "",
                  "// Verificar que todos los IDs esperados estén contenidos en los IDs de la respuesta",
                  "let allIdsPresent = expectedIds.every(id => responseIds.includes(id));",
                  "console.log(\"allIdsPresent\" + allIdsPresent);",
                  "",
                  "// Prueba para asegurar que todos los IDs esperados están en la respuesta",
                  "pm.test(\"All expected IDs are in the response\", function() {",
                  "    pm.expect(allIdsPresent).to.be.true;",
                  "});",
                  "",
                  "// Imprimir un mensaje en la consola para mayor claridad (opcional)",
                  "if (!allIdsPresent) {",
                  "    console.log(\"IDs faltantes:\", expectedIds.filter(id => !responseIds.includes(id)));",
                  "}*/"
                ],
                "_lastExecutionId": "f9117f4e-222b-467a-b442-40fa764aa997"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4b33758b-3c4f-4768-8d36-92928fbfe73b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1ca1347c-40b5-4a84-97c3-95238befee91"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDUzODkxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NSwiZXhwIjoxNzIzNzUzMzQ1fQ.I9c2P5Pl3rRQ0yfStr77W_4Xhq2gB1lneYmkNm-alME",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "731a9142-e52d-4b64-9390-2519ddb96422",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDUzODkxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NSwiZXhwIjoxNzIzNzUzMzQ1fQ.I9c2P5Pl3rRQ0yfStr77W_4Xhq2gB1lneYmkNm-alME",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c3c532de-7b95-4d3b-bbe3-76a7cf523b65",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:26 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2202"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"89a-5cVSza3GcIPgzkzEv3E/uAqGJHQ\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              53,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              85,
              115,
              101,
              114,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              110,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              116,
              97,
              116,
              117,
              115,
              44,
              32,
              117,
              115,
              117,
              97,
              108,
              108,
              121,
              32,
              114,
              101,
              102,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              32,
              98,
              121,
              32,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
              100,
              32,
              111,
              114,
              32,
              98,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              65,
              115,
              76,
              111,
              103,
              105,
              110,
              70,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              102,
              97,
              105,
              108,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              68,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              110,
              101,
              119,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              100,
              101,
              116,
              101,
              99,
              116,
              101,
              100,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              48,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              69,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              70,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              87,
              114,
              111,
              110,
              103,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              97,
              115,
              115,
              105,
              103,
              110,
              109,
              101,
              110,
              116,
              32,
              117,
              115,
              117,
              97,
              108,
              108,
              121,
              32,
              97,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              101,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              101,
              115,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              108,
              111,
              110,
              103,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              111,
              117,
              112,
              32,
              111,
              102,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              32,
              97,
              115,
              115,
              105,
              103,
              110,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              98,
              97,
              115,
              105,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              108,
              101,
              103,
              97,
              99,
              121,
              32,
              111,
              114,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              114,
              111,
              112,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              82,
              79,
              80,
              67,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              115,
              116,
              97,
              110,
              100,
              97,
              114,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              67,
              111,
              100,
              101,
              32,
              102,
              108,
              111,
              119,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              114,
              101,
              102,
              114,
              101,
              115,
              104,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              121,
              111,
              117,
              32,
              116,
              111,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              111,
              114,
              32,
              114,
              101,
              102,
              114,
              101,
              115,
              104,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              95,
              115,
              116,
              111,
              114,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              121,
              111,
              117,
              32,
              116,
              111,
              32,
              99,
              104,
              101,
              99,
              107,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              111,
              114,
              32,
              99,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              32,
              84,
              121,
              112,
              105,
              99,
              97,
              108,
              108,
              121,
              44,
              32,
              116,
              104,
              105,
              115,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              115,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              109,
              105,
              116,
              32,
              111,
              102,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              112,
              101,
              114,
              32,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              112,
              101,
              114,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              97,
              110,
              100,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              32,
              98,
              111,
              117,
              110,
              100,
              97,
              114,
              105,
              101,
              115,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 165,
          "responseSize": 2202
        },
        "id": "19d35e9e-09bc-4d5d-b70e-e36bbd5c2469",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "04c50257-a825-4f0c-85cf-90ea9a271cf7",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c322a56f-dad8-4edd-bc5d-32ed596ffae8"
        },
        "item": {
          "id": "19d35e9e-09bc-4d5d-b70e-e36bbd5c2469",
          "name": "[List]/v1/event",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c04ff0a2-3342-424d-b746-62ae6f8a1f21",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "/*// Obtener la respuesta en formato JSON",
                  "let jsonResponse = pm.response.json();",
                  "",
                  "// Obtener los IDs de la respuesta (ajusta el acceso según la estructura de tu respuesta)",
                  "let responseIds = jsonResponse.data.map(item => item.id); // Suponiendo que cada item tiene una propiedad `id`",
                  "console.log(\"ids obtenidos\" + responseIds);",
                  "",
                  "// Obtener los IDs esperados desde la variable de colección",
                  "let expectedIds = JSON.parse(pm.collectionVariables.get(\"iam_events_ids\"));",
                  "console.log(\"id almacenados\" + expectedIds);",
                  "",
                  "// Verificar que todos los IDs esperados estén contenidos en los IDs de la respuesta",
                  "let allIdsPresent = expectedIds.every(id => responseIds.includes(id));",
                  "console.log(\"allIdsPresent\" + allIdsPresent);",
                  "",
                  "// Prueba para asegurar que todos los IDs esperados están en la respuesta",
                  "pm.test(\"All expected IDs are in the response\", function() {",
                  "    pm.expect(allIdsPresent).to.be.true;",
                  "});",
                  "",
                  "// Imprimir un mensaje en la consola para mayor claridad (opcional)",
                  "if (!allIdsPresent) {",
                  "    console.log(\"IDs faltantes:\", expectedIds.filter(id => !responseIds.includes(id)));",
                  "}*/"
                ],
                "_lastExecutionId": "f9117f4e-222b-467a-b442-40fa764aa997"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4b33758b-3c4f-4768-8d36-92928fbfe73b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1ca1347c-40b5-4a84-97c3-95238befee91"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDUzODkxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NSwiZXhwIjoxNzIzNzUzMzQ1fQ.I9c2P5Pl3rRQ0yfStr77W_4Xhq2gB1lneYmkNm-alME",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "731a9142-e52d-4b64-9390-2519ddb96422",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDUzODkxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NSwiZXhwIjoxNzIzNzUzMzQ1fQ.I9c2P5Pl3rRQ0yfStr77W_4Xhq2gB1lneYmkNm-alME",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c3c532de-7b95-4d3b-bbe3-76a7cf523b65",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:26 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2202"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"89a-5cVSza3GcIPgzkzEv3E/uAqGJHQ\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              53,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              85,
              115,
              101,
              114,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              110,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              116,
              97,
              116,
              117,
              115,
              44,
              32,
              117,
              115,
              117,
              97,
              108,
              108,
              121,
              32,
              114,
              101,
              102,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              32,
              98,
              121,
              32,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
              100,
              32,
              111,
              114,
              32,
              98,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              65,
              115,
              76,
              111,
              103,
              105,
              110,
              70,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              102,
              97,
              105,
              108,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              68,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              110,
              101,
              119,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              100,
              101,
              116,
              101,
              99,
              116,
              101,
              100,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              48,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              110,
              69,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              70,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              87,
              114,
              111,
              110,
              103,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              97,
              115,
              115,
              105,
              103,
              110,
              109,
              101,
              110,
              116,
              32,
              117,
              115,
              117,
              97,
              108,
              108,
              121,
              32,
              97,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              101,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              101,
              115,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              108,
              111,
              110,
              103,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              111,
              117,
              112,
              32,
              111,
              102,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              105,
              101,
              115,
              32,
              97,
              115,
              115,
              105,
              103,
              110,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              98,
              97,
              115,
              105,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              108,
              101,
              103,
              97,
              99,
              121,
              32,
              111,
              114,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              114,
              111,
              112,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              82,
              79,
              80,
              67,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              105,
              109,
              101,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              115,
              116,
              97,
              110,
              100,
              97,
              114,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              67,
              111,
              100,
              101,
              32,
              102,
              108,
              111,
              119,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              111,
              97,
              117,
              116,
              104,
              95,
              114,
              101,
              102,
              114,
              101,
              115,
              104,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              121,
              111,
              117,
              32,
              116,
              111,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              111,
              114,
              32,
              114,
              101,
              102,
              114,
              101,
              115,
              104,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              95,
              115,
              116,
              111,
              114,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              104,
              111,
              111,
              107,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              46,
              32,
              65,
              108,
              108,
              111,
              119,
              115,
              32,
              121,
              111,
              117,
              32,
              116,
              111,
              32,
              99,
              104,
              101,
              99,
              107,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              111,
              114,
              32,
              99,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              32,
              84,
              121,
              112,
              105,
              99,
              97,
              108,
              108,
              121,
              44,
              32,
              116,
              104,
              105,
              115,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              115,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              109,
              105,
              116,
              32,
              111,
              102,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              112,
              101,
              114,
              32,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              112,
              101,
              114,
              32,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              97,
              110,
              100,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              32,
              98,
              111,
              117,
              110,
              100,
              97,
              114,
              105,
              101,
              115,
              46,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 165,
          "responseSize": 2202
        },
        "id": "19d35e9e-09bc-4d5d-b70e-e36bbd5c2469",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3750dcbb-9b04-42fc-a111-f2b90c91335e",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ff64451-c937-479d-9851-2dfd28e0fd8e"
        },
        "item": {
          "id": "2cf5a5af-baf3-4e36-8e2d-22dd30b24bba",
          "name": "[List :id]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "full"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0173818-e185-460a-9899-dd66fdd16d1f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verifying Name is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    let currentName = jsonData.name;",
                  "    pm.expect(currentName).to.be.an('string');",
                  "    pm.expect(currentName.length > 1).eq(true);",
                  "    let expectedName = pm.collectionVariables.get(\"name\");",
                  "    pm.expect(currentName).to.eql(expectedName);",
                  "    //console.log(\"Current value is \"+currentName+ \" and the expected value is \"+ expectedName)",
                  "});",
                  "",
                  "pm.test(\"Verifying Id is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    let currentID = jsonData.id;",
                  "    pm.expect(currentID).to.not.be.null;",
                  "    pm.expect(currentID).to.not.be.undefined;",
                  "    let expectedId = pm.collectionVariables.get(\"eventId\");",
                  "    pm.expect(currentID).to.eql(expectedId);",
                  "    //console.log(\"Current id is \"+currentID+ \" and the expected id is \"+ expectedId);",
                  "});",
                  "",
                  "pm.test(\"Verifying created_at is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('created_at');",
                  "    let currentCreatedAt = new Date(jsonData.created_at).toISOString().slice(0, 19) + 'Z';",
                  "    let iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
                  "    pm.expect(currentCreatedAt).to.match(iso8601Regex);",
                  "    let expectedCreatedAt = pm.collectionVariables.get(\"createdAt\");",
                  "    expectedCreatedAt = new Date(expectedCreatedAt).toISOString().slice(0, 19) + 'Z';",
                  "    pm.expect(currentCreatedAt).to.eql(expectedCreatedAt);",
                  "});",
                  "",
                  "pm.test(\"Verifying updated_at is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('updated_at');",
                  "    let currentUpdatedAt = new Date(jsonData.updated_at).toISOString().slice(0, 19) + 'Z';",
                  "    //console.log(\"obtenida\" + currentUpdatedAt);",
                  "    let expectedUpdatedAt = pm.collectionVariables.get(\"updatedAt\");",
                  "    expectedUpdatedAt = new Date(expectedUpdatedAt).toISOString().slice(0, 19) + 'Z';",
                  "    //console.log(\"esperada\" + expectedUpdatedAt);",
                  "    pm.expect(currentUpdatedAt).to.eql(expectedUpdatedAt);",
                  "    //console.log(\"Current updated_at is \"+currentUpdatedAt+ \" and the expected updated_at is \"+ expectedUpdatedAt);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "32975165-c381-4388-b04e-73a7c074b546"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "17391256-b774-4945-936f-2945fe9a4e61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "6fab15ae-26f4-4c3d-af54-875954946d6e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "format",
                "value": "full"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDY5ODA4NCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.2SWkyqCgCa0thxlMcjUoaVcPCZzDypeOCo3T5fgRFGk",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8eefda89-2885-4efe-b979-68a6ea9a1791",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDY5ODA4NCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.2SWkyqCgCa0thxlMcjUoaVcPCZzDypeOCo3T5fgRFGk",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "37dccd3e-19b9-417b-a7af-1a10be4b4209",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:27 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-Xf3LfGHlmRz1JVDAq0DmjboN8/M\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              48,
              48,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 259,
          "responseSize": 183
        },
        "id": "2cf5a5af-baf3-4e36-8e2d-22dd30b24bba",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Verifying Name is the created one",
            "skipped": false
          },
          {
            "assertion": "Verifying Id is the created one",
            "skipped": false
          },
          {
            "assertion": "Verifying created_at is the created one",
            "skipped": false
          },
          {
            "assertion": "Verifying updated_at is the created one",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3750dcbb-9b04-42fc-a111-f2b90c91335e",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ff64451-c937-479d-9851-2dfd28e0fd8e"
        },
        "item": {
          "id": "2cf5a5af-baf3-4e36-8e2d-22dd30b24bba",
          "name": "[List :id]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "full"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0173818-e185-460a-9899-dd66fdd16d1f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verifying Name is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    let currentName = jsonData.name;",
                  "    pm.expect(currentName).to.be.an('string');",
                  "    pm.expect(currentName.length > 1).eq(true);",
                  "    let expectedName = pm.collectionVariables.get(\"name\");",
                  "    pm.expect(currentName).to.eql(expectedName);",
                  "    //console.log(\"Current value is \"+currentName+ \" and the expected value is \"+ expectedName)",
                  "});",
                  "",
                  "pm.test(\"Verifying Id is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    let currentID = jsonData.id;",
                  "    pm.expect(currentID).to.not.be.null;",
                  "    pm.expect(currentID).to.not.be.undefined;",
                  "    let expectedId = pm.collectionVariables.get(\"eventId\");",
                  "    pm.expect(currentID).to.eql(expectedId);",
                  "    //console.log(\"Current id is \"+currentID+ \" and the expected id is \"+ expectedId);",
                  "});",
                  "",
                  "pm.test(\"Verifying created_at is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('created_at');",
                  "    let currentCreatedAt = new Date(jsonData.created_at).toISOString().slice(0, 19) + 'Z';",
                  "    let iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
                  "    pm.expect(currentCreatedAt).to.match(iso8601Regex);",
                  "    let expectedCreatedAt = pm.collectionVariables.get(\"createdAt\");",
                  "    expectedCreatedAt = new Date(expectedCreatedAt).toISOString().slice(0, 19) + 'Z';",
                  "    pm.expect(currentCreatedAt).to.eql(expectedCreatedAt);",
                  "});",
                  "",
                  "pm.test(\"Verifying updated_at is the created one\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('updated_at');",
                  "    let currentUpdatedAt = new Date(jsonData.updated_at).toISOString().slice(0, 19) + 'Z';",
                  "    //console.log(\"obtenida\" + currentUpdatedAt);",
                  "    let expectedUpdatedAt = pm.collectionVariables.get(\"updatedAt\");",
                  "    expectedUpdatedAt = new Date(expectedUpdatedAt).toISOString().slice(0, 19) + 'Z';",
                  "    //console.log(\"esperada\" + expectedUpdatedAt);",
                  "    pm.expect(currentUpdatedAt).to.eql(expectedUpdatedAt);",
                  "    //console.log(\"Current updated_at is \"+currentUpdatedAt+ \" and the expected updated_at is \"+ expectedUpdatedAt);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "32975165-c381-4388-b04e-73a7c074b546"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "17391256-b774-4945-936f-2945fe9a4e61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "6fab15ae-26f4-4c3d-af54-875954946d6e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "format",
                "value": "full"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDY5ODA4NCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.2SWkyqCgCa0thxlMcjUoaVcPCZzDypeOCo3T5fgRFGk",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8eefda89-2885-4efe-b979-68a6ea9a1791",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDY5ODA4NCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.2SWkyqCgCa0thxlMcjUoaVcPCZzDypeOCo3T5fgRFGk",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "37dccd3e-19b9-417b-a7af-1a10be4b4209",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:27 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-Xf3LfGHlmRz1JVDAq0DmjboN8/M\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              50,
              53,
              46,
              48,
              48,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 259,
          "responseSize": 183
        },
        "id": "2cf5a5af-baf3-4e36-8e2d-22dd30b24bba",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Verifying Name is the created one",
            "skipped": false
          },
          {
            "assertion": "Verifying Id is the created one",
            "skipped": false
          },
          {
            "assertion": "Verifying created_at is the created one",
            "skipped": false
          },
          {
            "assertion": "Verifying updated_at is the created one",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "666edc37-e580-461a-abaf-9de21fff0eab",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "62e6a2a2-3952-4131-a6f3-bc58152563f6"
        },
        "item": {
          "id": "18660602-23e9-4fd9-b5d7-96965feb32cf",
          "name": "[Update :id]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "full"
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "\n{\n  \"name\": \"update put:id\",\n  \"description\": \"The authentication process fails\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"{{$randomDateFuture}}\",\n  \"group\": \"user\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e694deb-d70a-4d83-8043-4821d46cb26c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful PUT request\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"updated_at was updated correctly\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    let newUpdatedAtS = jsonData.updated_at;",
                  "    let newUpdatedAt = new Date(newUpdatedAtS);",
                  "    //console.log(\"newUpdatedAt \"+newUpdatedAt);",
                  "    let updatedAtS = pm.collectionVariables.get(\"updatedAt\");",
                  "    let updatedAt = new Date(updatedAtS);",
                  "    //console.log(\"updatedAt \"+updatedAt);",
                  "    pm.expect(updatedAt.getTime()).to.be.lessThan(newUpdatedAt.getTime());",
                  "    //pm.expect(newUpdatedAt).to.not.be.eql(updatedAt);",
                  "});",
                  "",
                  "pm.test(\"Name was updated correctly\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    let newName = jsonData.name;",
                  "    let collLastName = pm.collectionVariables.get(\"name\");",
                  "    pm.expect(newName).to.not.be.eql(collLastName);",
                  "    //console.log(\"New last name is \"+newName+\" and Old last name is \"+collLastName);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "243c3be9-ff5c-4ee8-abe3-115f81e87ef5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "format",
                "value": "full"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDc2NzMzNiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.BosDXKMrQpkEh5e64ngmaNMeoJVDNldiRPQq2GIzbHM",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c29a801e-0f9f-43bb-81d2-0e6a6351b005",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "3349",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "\n{\n  \"name\": \"update put:id\",\n  \"description\": \"The authentication process fails\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"Fri Aug 23 2024 10:21:05 GMT+0200 (hora de verano de Europa central)\",\n  \"group\": \"user\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDc2NzMzNiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.BosDXKMrQpkEh5e64ngmaNMeoJVDNldiRPQq2GIzbHM",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ab4d738b-7e38-449e-848d-37d1e27e4b99",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2789"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"ae5-7VszucvU7Iq4we3trw9OUBXn1A0\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              66,
              65,
              83,
              73,
              67,
              34,
              44,
              34,
              102,
              108,
              111,
              119,
              34,
              58,
              34,
              49,
              55,
              48,
              56,
              51,
              52,
              49,
              52,
              50,
              51,
              51,
              50,
              54,
              50,
              51,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              34,
              58,
              123,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              58,
              91,
              51,
              93,
              125,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              115,
              104,
              111,
              114,
              116,
              34,
              58,
              34,
              76,
              79,
              71,
              73,
              78,
              95,
              78,
              79,
              79,
              75,
              34,
              125,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              58,
              123,
              34,
              104,
              97,
              115,
              104,
              34,
              58,
              34,
              49,
              56,
              101,
              50,
              51,
              97,
              102,
              52,
              97,
              50,
              55,
              98,
              48,
              101,
              48,
              49,
              56,
              50,
              102,
              101,
              100,
              53,
              99,
              98,
              100,
              55,
              50,
              56,
              54,
              98,
              101,
              49,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              101,
              87,
              65,
              83,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              51,
              46,
              54,
              46,
              49,
              45,
              49,
              50,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              85,
              85,
              85,
              85,
              45,
              65,
              65,
              65,
              65,
              45,
              73,
              73,
              73,
              73,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              105,
              80,
              97,
              100,
              32,
              80,
              114,
              111,
              32,
              50,
              48,
              50,
              51,
              32,
              49,
              48,
              46,
              53,
              105,
              110,
              99,
              104,
              32,
              40,
              105,
              80,
              97,
              100,
              79,
              83,
              32,
              49,
              54,
              46,
              54,
              41,
              34,
              125,
              44,
              34,
              111,
              115,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              105,
              80,
              97,
              100,
              79,
              83,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              54,
              46,
              54,
              34,
              125,
              125,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              125,
              44,
              34,
              103,
              101,
              111,
              105,
              112,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              58,
              123,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              52,
              48,
              48,
              48,
              34,
              44,
              34,
              105,
              112,
              34,
              58,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              48,
              48,
              48,
              34,
              125,
              44,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              112,
              34,
              58,
              34,
              58,
              58,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              34,
              44,
              34,
              105,
              112,
              79,
              114,
              105,
              103,
              105,
              110,
              97,
              108,
              34,
              58,
              34,
              58,
              58,
              49,
              34,
              125,
              125,
              125,
              44,
              34,
              102,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              53,
              44,
              34,
              107,
              111,
              95,
              108,
              97,
              115,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              50,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              48,
              53,
              58,
              50,
              55,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              107,
              111,
              95,
              115,
              116,
              97,
              114,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              50,
              45,
              48,
              54,
              84,
              49,
              55,
              58,
              52,
              48,
              58,
              50,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              49,
              56,
              55,
              55,
              50,
              49,
              44,
              34,
              107,
              111,
              95,
              100,
              105,
              102,
              102,
              34,
              58,
              56,
              52,
              56,
              53,
              125,
              125,
              44,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              102,
              108,
              111,
              119,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              114,
              114,
              97,
              121,
              34,
              44,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              93,
              125,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              115,
              104,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              115,
              104,
              111,
              114,
              116,
              34,
              93,
              125,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              104,
              97,
              115,
              104,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              93,
              125,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              93,
              125,
              44,
              34,
              111,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              111,
              115,
              34,
              93,
              125,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              93,
              125,
              44,
              34,
              103,
              101,
              111,
              105,
              112,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              110,
              117,
              108,
              108,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              125,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              112,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              104,
              111,
              115,
              116,
              34,
              44,
              34,
              105,
              112,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              34,
              93,
              125,
              44,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              105,
              112,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              112,
              79,
              114,
              105,
              103,
              105,
              110,
              97,
              108,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              105,
              112,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              105,
              112,
              79,
              114,
              105,
              103,
              105,
              110,
              97,
              108,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              117,
              115,
              101,
              114,
              97,
              103,
              101,
              110,
              116,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              44,
              34,
              103,
              101,
              111,
              105,
              112,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              44,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              104,
              97,
              115,
              104,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              93,
              125,
              44,
              34,
              102,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              44,
              34,
              107,
              111,
              95,
              108,
              97,
              115,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              107,
              111,
              95,
              115,
              116,
              97,
              114,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              44,
              34,
              107,
              111,
              95,
              100,
              105,
              102,
              102,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              107,
              111,
              95,
              108,
              97,
              115,
              116,
              34,
              44,
              34,
              107,
              111,
              95,
              115,
              116,
              97,
              114,
              116,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              44,
              34,
              107,
              111,
              95,
              100,
              105,
              102,
              102,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              44,
              34,
              102,
              108,
              111,
              119,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              44,
              34,
              102,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              93,
              125,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              112,
              117,
              116,
              58,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              102,
              97,
              105,
              108,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              50,
              49,
              58,
              48,
              53,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              49,
              56,
              84,
              49,
              50,
              58,
              49,
              57,
              58,
              53,
              50,
              46,
              48,
              48,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 281,
          "responseSize": 2789
        },
        "id": "18660602-23e9-4fd9-b5d7-96965feb32cf",
        "assertions": [
          {
            "assertion": "Successful PUT request",
            "skipped": false
          },
          {
            "assertion": "updated_at was updated correctly",
            "skipped": false
          },
          {
            "assertion": "Name was updated correctly",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "666edc37-e580-461a-abaf-9de21fff0eab",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "62e6a2a2-3952-4131-a6f3-bc58152563f6"
        },
        "item": {
          "id": "18660602-23e9-4fd9-b5d7-96965feb32cf",
          "name": "[Update :id]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "full"
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "\n{\n  \"name\": \"update put:id\",\n  \"description\": \"The authentication process fails\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"{{$randomDateFuture}}\",\n  \"group\": \"user\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e694deb-d70a-4d83-8043-4821d46cb26c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful PUT request\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"updated_at was updated correctly\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    let newUpdatedAtS = jsonData.updated_at;",
                  "    let newUpdatedAt = new Date(newUpdatedAtS);",
                  "    //console.log(\"newUpdatedAt \"+newUpdatedAt);",
                  "    let updatedAtS = pm.collectionVariables.get(\"updatedAt\");",
                  "    let updatedAt = new Date(updatedAtS);",
                  "    //console.log(\"updatedAt \"+updatedAt);",
                  "    pm.expect(updatedAt.getTime()).to.be.lessThan(newUpdatedAt.getTime());",
                  "    //pm.expect(newUpdatedAt).to.not.be.eql(updatedAt);",
                  "});",
                  "",
                  "pm.test(\"Name was updated correctly\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    let newName = jsonData.name;",
                  "    let collLastName = pm.collectionVariables.get(\"name\");",
                  "    pm.expect(newName).to.not.be.eql(collLastName);",
                  "    //console.log(\"New last name is \"+newName+\" and Old last name is \"+collLastName);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "243c3be9-ff5c-4ee8-abe3-115f81e87ef5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "format",
                "value": "full"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDc2NzMzNiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.BosDXKMrQpkEh5e64ngmaNMeoJVDNldiRPQq2GIzbHM",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c29a801e-0f9f-43bb-81d2-0e6a6351b005",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "3349",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "\n{\n  \"name\": \"update put:id\",\n  \"description\": \"The authentication process fails\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"Fri Aug 23 2024 10:21:05 GMT+0200 (hora de verano de Europa central)\",\n  \"group\": \"user\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDc2NzMzNiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0NywiZXhwIjoxNzIzNzUzMzQ3fQ.BosDXKMrQpkEh5e64ngmaNMeoJVDNldiRPQq2GIzbHM",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ab4d738b-7e38-449e-848d-37d1e27e4b99",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2789"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"ae5-7VszucvU7Iq4we3trw9OUBXn1A0\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              34,
              58,
              123,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              66,
              65,
              83,
              73,
              67,
              34,
              44,
              34,
              102,
              108,
              111,
              119,
              34,
              58,
              34,
              49,
              55,
              48,
              56,
              51,
              52,
              49,
              52,
              50,
              51,
              51,
              50,
              54,
              50,
              51,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              34,
              58,
              123,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              58,
              91,
              51,
              93,
              125,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              115,
              104,
              111,
              114,
              116,
              34,
              58,
              34,
              76,
              79,
              71,
              73,
              78,
              95,
              78,
              79,
              79,
              75,
              34,
              125,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              58,
              123,
              34,
              104,
              97,
              115,
              104,
              34,
              58,
              34,
              49,
              56,
              101,
              50,
              51,
              97,
              102,
              52,
              97,
              50,
              55,
              98,
              48,
              101,
              48,
              49,
              56,
              50,
              102,
              101,
              100,
              53,
              99,
              98,
              100,
              55,
              50,
              56,
              54,
              98,
              101,
              49,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              101,
              87,
              65,
              83,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              51,
              46,
              54,
              46,
              49,
              45,
              49,
              50,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              85,
              85,
              85,
              85,
              45,
              65,
              65,
              65,
              65,
              45,
              73,
              73,
              73,
              73,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              105,
              80,
              97,
              100,
              32,
              80,
              114,
              111,
              32,
              50,
              48,
              50,
              51,
              32,
              49,
              48,
              46,
              53,
              105,
              110,
              99,
              104,
              32,
              40,
              105,
              80,
              97,
              100,
              79,
              83,
              32,
              49,
              54,
              46,
              54,
              41,
              34,
              125,
              44,
              34,
              111,
              115,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              105,
              80,
              97,
              100,
              79,
              83,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              54,
              46,
              54,
              34,
              125,
              125,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              125,
              44,
              34,
              103,
              101,
              111,
              105,
              112,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              58,
              123,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              52,
              48,
              48,
              48,
              34,
              44,
              34,
              105,
              112,
              34,
              58,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              48,
              48,
              48,
              34,
              125,
              44,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              112,
              34,
              58,
              34,
              58,
              58,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              34,
              44,
              34,
              105,
              112,
              79,
              114,
              105,
              103,
              105,
              110,
              97,
              108,
              34,
              58,
              34,
              58,
              58,
              49,
              34,
              125,
              125,
              125,
              44,
              34,
              102,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              53,
              44,
              34,
              107,
              111,
              95,
              108,
              97,
              115,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              50,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              48,
              53,
              58,
              50,
              55,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              107,
              111,
              95,
              115,
              116,
              97,
              114,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              50,
              45,
              48,
              54,
              84,
              49,
              55,
              58,
              52,
              48,
              58,
              50,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              49,
              56,
              55,
              55,
              50,
              49,
              44,
              34,
              107,
              111,
              95,
              100,
              105,
              102,
              102,
              34,
              58,
              56,
              52,
              56,
              53,
              125,
              125,
              44,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              102,
              108,
              111,
              119,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              114,
              114,
              97,
              121,
              34,
              44,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              93,
              125,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              115,
              104,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              115,
              104,
              111,
              114,
              116,
              34,
              93,
              125,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              104,
              97,
              115,
              104,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              93,
              125,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              93,
              125,
              44,
              34,
              111,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              111,
              115,
              34,
              93,
              125,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              93,
              125,
              44,
              34,
              103,
              101,
              111,
              105,
              112,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              110,
              117,
              108,
              108,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              125,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              112,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              104,
              111,
              115,
              116,
              34,
              44,
              34,
              105,
              112,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              34,
              93,
              125,
              44,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              105,
              112,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              112,
              79,
              114,
              105,
              103,
              105,
              110,
              97,
              108,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              105,
              112,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              105,
              112,
              79,
              114,
              105,
              103,
              105,
              110,
              97,
              108,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              117,
              115,
              101,
              114,
              97,
              103,
              101,
              110,
              116,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              44,
              34,
              103,
              101,
              111,
              105,
              112,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              44,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              104,
              97,
              115,
              104,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              93,
              125,
              44,
              34,
              102,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              44,
              34,
              107,
              111,
              95,
              108,
              97,
              115,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              107,
              111,
              95,
              115,
              116,
              97,
              114,
              116,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              44,
              34,
              107,
              111,
              95,
              100,
              105,
              102,
              102,
              34,
              58,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              105,
              110,
              116,
              101,
              103,
              101,
              114,
              34,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              107,
              111,
              95,
              108,
              97,
              115,
              116,
              34,
              44,
              34,
              107,
              111,
              95,
              115,
              116,
              97,
              114,
              116,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              44,
              34,
              107,
              111,
              95,
              100,
              105,
              102,
              102,
              34,
              93,
              125,
              125,
              44,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              44,
              34,
              102,
              108,
              111,
              119,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              44,
              34,
              102,
              97,
              105,
              108,
              117,
              114,
              101,
              34,
              93,
              125,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              112,
              117,
              116,
              58,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              102,
              97,
              105,
              108,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              50,
              49,
              58,
              48,
              53,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              49,
              56,
              84,
              49,
              50,
              58,
              49,
              57,
              58,
              53,
              50,
              46,
              48,
              48,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 281,
          "responseSize": 2789
        },
        "id": "18660602-23e9-4fd9-b5d7-96965feb32cf",
        "assertions": [
          {
            "assertion": "Successful PUT request",
            "skipped": false
          },
          {
            "assertion": "updated_at was updated correctly",
            "skipped": false
          },
          {
            "assertion": "Name was updated correctly",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8660ea0e-2a01-4092-aecb-04ce5af45edb",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5ec838b2-bf57-4413-b431-2031bdd2a9b4"
        },
        "item": {
          "id": "c8969862-3e12-494e-a4ac-97f6513ce2c0",
          "name": "[DELETE :id]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc3e5fd3-fe19-48f8-b730-6b18b4717da2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Dynamic delete action for existent target with status code is 200\", function () {",
                  "    if(pm.response.responseSize) {",
                  "        let jsonData = pm.response.json(); ",
                  "        let id = pm.collectionVariables.get(\"eventId\");",
                  "",
                  "        pm.response.to.have.status(200);",
                  "        ",
                  "        pm.expect(jsonData).to.be.an('object');",
                  "        pm.expect(jsonData.id).eq(id);",
                  "        pm.expect(jsonData.name).to.be.an('string');",
                  "        pm.expect(jsonData.description).to.be.an('string');",
                  "        pm.expect(jsonData.description.length > 1).eq(true);",
                  "        pm.expect(jsonData.description).to.not.be.empty;",
                  "    }else{",
                  "        pm.expect(pm.response.code).to.not.equal(200);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Dynamic delete action for not existent target with status code 404\", function () {",
                  "    if(!pm.response.responseSize) {",
                  "        pm.response.to.have.status(404);",
                  "    }else{",
                  "        pm.expect(pm.response.code).to.not.equal(404);",
                  "    }",
                  "});",
                  "",
                  "if(pm.response.responseSize) {",
                  "    let jsonData = pm.response.json(); ",
                  "    if(jsonData) {",
                  "        let iam_events_ids = pm.collectionVariables.get(\"iam_events_ids\");",
                  "        let list = JSON.parse(iam_events_ids);",
                  "        delete_id = jsonData.id;",
                  "        let res = list.filter(item => item != delete_id);",
                  "        iam_events_ids= JSON.stringify(res);",
                  "        pm.collectionVariables.set(\"iam_events_ids\", iam_events_ids);",
                  "    }",
                  "}",
                  "       ",
                  "",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "6e3a2577-ab0b-429c-9001-16c2e827b17d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDgzMTQ3OSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OCwiZXhwIjoxNzIzNzUzMzQ4fQ.KQjpwxGwHPG0giU9XDrOhr-QwQMHxHEsgyeGHau96iY",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f200632-0298-444a-b9d5-eb040e2a24d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDgzMTQ3OSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OCwiZXhwIjoxNzIzNzUzMzQ4fQ.KQjpwxGwHPG0giU9XDrOhr-QwQMHxHEsgyeGHau96iY",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c90f7eb7-a265-4c4f-b78c-9742768eecbd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "111"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"6f-AFAD0xkaXH95TyL5vvGbK72oZcU\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              112,
              117,
              116,
              58,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              102,
              97,
              105,
              108,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125
            ]
          },
          "cookie": [],
          "responseTime": 340,
          "responseSize": 111
        },
        "id": "c8969862-3e12-494e-a4ac-97f6513ce2c0",
        "assertions": [
          {
            "assertion": "Dynamic delete action for existent target with status code is 200",
            "skipped": false
          },
          {
            "assertion": "Dynamic delete action for not existent target with status code 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8660ea0e-2a01-4092-aecb-04ce5af45edb",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5ec838b2-bf57-4413-b431-2031bdd2a9b4"
        },
        "item": {
          "id": "c8969862-3e12-494e-a4ac-97f6513ce2c0",
          "name": "[DELETE :id]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc3e5fd3-fe19-48f8-b730-6b18b4717da2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Dynamic delete action for existent target with status code is 200\", function () {",
                  "    if(pm.response.responseSize) {",
                  "        let jsonData = pm.response.json(); ",
                  "        let id = pm.collectionVariables.get(\"eventId\");",
                  "",
                  "        pm.response.to.have.status(200);",
                  "        ",
                  "        pm.expect(jsonData).to.be.an('object');",
                  "        pm.expect(jsonData.id).eq(id);",
                  "        pm.expect(jsonData.name).to.be.an('string');",
                  "        pm.expect(jsonData.description).to.be.an('string');",
                  "        pm.expect(jsonData.description.length > 1).eq(true);",
                  "        pm.expect(jsonData.description).to.not.be.empty;",
                  "    }else{",
                  "        pm.expect(pm.response.code).to.not.equal(200);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Dynamic delete action for not existent target with status code 404\", function () {",
                  "    if(!pm.response.responseSize) {",
                  "        pm.response.to.have.status(404);",
                  "    }else{",
                  "        pm.expect(pm.response.code).to.not.equal(404);",
                  "    }",
                  "});",
                  "",
                  "if(pm.response.responseSize) {",
                  "    let jsonData = pm.response.json(); ",
                  "    if(jsonData) {",
                  "        let iam_events_ids = pm.collectionVariables.get(\"iam_events_ids\");",
                  "        let list = JSON.parse(iam_events_ids);",
                  "        delete_id = jsonData.id;",
                  "        let res = list.filter(item => item != delete_id);",
                  "        iam_events_ids= JSON.stringify(res);",
                  "        pm.collectionVariables.set(\"iam_events_ids\", iam_events_ids);",
                  "    }",
                  "}",
                  "       ",
                  "",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "6e3a2577-ab0b-429c-9001-16c2e827b17d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDgzMTQ3OSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OCwiZXhwIjoxNzIzNzUzMzQ4fQ.KQjpwxGwHPG0giU9XDrOhr-QwQMHxHEsgyeGHau96iY",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f200632-0298-444a-b9d5-eb040e2a24d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDgzMTQ3OSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OCwiZXhwIjoxNzIzNzUzMzQ4fQ.KQjpwxGwHPG0giU9XDrOhr-QwQMHxHEsgyeGHau96iY",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c90f7eb7-a265-4c4f-b78c-9742768eecbd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "111"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"6f-AFAD0xkaXH95TyL5vvGbK72oZcU\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              112,
              117,
              116,
              58,
              105,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              102,
              97,
              105,
              108,
              115,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125
            ]
          },
          "cookie": [],
          "responseTime": 340,
          "responseSize": 111
        },
        "id": "c8969862-3e12-494e-a4ac-97f6513ce2c0",
        "assertions": [
          {
            "assertion": "Dynamic delete action for existent target with status code is 200",
            "skipped": false
          },
          {
            "assertion": "Dynamic delete action for not existent target with status code 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "20460d96-3ee3-4ed6-b46e-5adc467ed7b8",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2cabba01-16a1-4914-8813-580d1a387a26"
        },
        "item": {
          "id": "8ff7dbb1-8dc0-4eb8-9ff1-108210981b0f",
          "name": "[Delete 404]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f71cd2a7-145c-43b1-99fa-556d979eb7fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Static delete action for not existent target with status code 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "_lastExecutionId": "3e0494b5-9c92-43ad-b367-d1c0dd948ae7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "99999"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDkxNjA3MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OSwiZXhwIjoxNzIzNzUzMzQ5fQ.K44Q2L_w46oOtxnnaq30xRVLQOM3s7vQeRHxYFIsvKQ",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75e69ac1-57c9-4b7d-861a-cf8aa9c29d8e",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDkxNjA3MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OSwiZXhwIjoxNzIzNzUzMzQ5fQ.K44Q2L_w46oOtxnnaq30xRVLQOM3s7vQeRHxYFIsvKQ",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "740ded19-24b2-4050-af3e-77840dbd07e2",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "78"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"4e-yo1YlsVOQ7RZ89tQajJfOc2Tl6o\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              110,
              111,
              116,
              95,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              116,
              97,
              114,
              103,
              101,
              116,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 144,
          "responseSize": 78
        },
        "id": "8ff7dbb1-8dc0-4eb8-9ff1-108210981b0f",
        "assertions": [
          {
            "assertion": "Static delete action for not existent target with status code 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "20460d96-3ee3-4ed6-b46e-5adc467ed7b8",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2cabba01-16a1-4914-8813-580d1a387a26"
        },
        "item": {
          "id": "8ff7dbb1-8dc0-4eb8-9ff1-108210981b0f",
          "name": "[Delete 404]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f71cd2a7-145c-43b1-99fa-556d979eb7fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Static delete action for not existent target with status code 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "_lastExecutionId": "3e0494b5-9c92-43ad-b367-d1c0dd948ae7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "99999"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDkxNjA3MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OSwiZXhwIjoxNzIzNzUzMzQ5fQ.K44Q2L_w46oOtxnnaq30xRVLQOM3s7vQeRHxYFIsvKQ",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75e69ac1-57c9-4b7d-861a-cf8aa9c29d8e",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNDkxNjA3MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM0OSwiZXhwIjoxNzIzNzUzMzQ5fQ.K44Q2L_w46oOtxnnaq30xRVLQOM3s7vQeRHxYFIsvKQ",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "740ded19-24b2-4050-af3e-77840dbd07e2",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "78"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"4e-yo1YlsVOQ7RZ89tQajJfOc2Tl6o\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              110,
              111,
              116,
              95,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              116,
              97,
              114,
              103,
              101,
              116,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 144,
          "responseSize": 78
        },
        "id": "8ff7dbb1-8dc0-4eb8-9ff1-108210981b0f",
        "assertions": [
          {
            "assertion": "Static delete action for not existent target with status code 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "98b03d24-bffa-439c-8069-9a4016156ddb",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c565ffdc-825c-403c-8de0-62985586c3b9"
        },
        "item": {
          "id": "e2e945a8-49de-49e1-bc92-57f524f03dff",
          "name": "[Get id deleted]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5aeff82a-f4c7-4eef-82f7-4dccb9be94f9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "bfc3ef04-b30f-477f-93f2-0b944a894406"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2ba25887-9888-48bb-a07c-60540002df1b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "fe9acf99-c7c6-491b-9955-ca34f7534034"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTA2ODQzOSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MCwiZXhwIjoxNzIzNzUzMzUwfQ.ND7hSw6qRsBs6WVQq3VwvCfRABipPPLaqtTwxdBLKis",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c4dd9879-b921-4311-b912-77210f17a633",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTA2ODQzOSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MCwiZXhwIjoxNzIzNzUzMzUwfQ.ND7hSw6qRsBs6WVQq3VwvCfRABipPPLaqtTwxdBLKis",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5c96f08e-053a-43ff-95d3-73736178c17d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "78"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"4e-yo1YlsVOQ7RZ89tQajJfOc2Tl6o\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              110,
              111,
              116,
              95,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              116,
              97,
              114,
              103,
              101,
              116,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 176,
          "responseSize": 78
        },
        "id": "e2e945a8-49de-49e1-bc92-57f524f03dff",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "98b03d24-bffa-439c-8069-9a4016156ddb",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c565ffdc-825c-403c-8de0-62985586c3b9"
        },
        "item": {
          "id": "e2e945a8-49de-49e1-bc92-57f524f03dff",
          "name": "[Get id deleted]/v1/event/:id",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5aeff82a-f4c7-4eef-82f7-4dccb9be94f9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "bfc3ef04-b30f-477f-93f2-0b944a894406"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2ba25887-9888-48bb-a07c-60540002df1b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "fe9acf99-c7c6-491b-9955-ca34f7534034"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135266"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTA2ODQzOSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MCwiZXhwIjoxNzIzNzUzMzUwfQ.ND7hSw6qRsBs6WVQq3VwvCfRABipPPLaqtTwxdBLKis",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c4dd9879-b921-4311-b912-77210f17a633",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTA2ODQzOSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MCwiZXhwIjoxNzIzNzUzMzUwfQ.ND7hSw6qRsBs6WVQq3VwvCfRABipPPLaqtTwxdBLKis",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5c96f08e-053a-43ff-95d3-73736178c17d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "78"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"4e-yo1YlsVOQ7RZ89tQajJfOc2Tl6o\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              110,
              111,
              116,
              95,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              116,
              97,
              114,
              103,
              101,
              116,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 176,
          "responseSize": 78
        },
        "id": "e2e945a8-49de-49e1-bc92-57f524f03dff",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b1caa1d-2ae8-43ee-8968-7a83775fc526",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c06ac1ad-f3b2-4f7e-b89b-6ac62429f2ac"
        },
        "item": {
          "id": "c3e3e7a5-7460-47c1-8da5-8464a1cb6624",
          "name": "[Create 1]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test1\",\r\n  \"description\": \"Test1\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69a1834a-a0dd-4dc7-a287-a406e3d73603",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5562da3f-9cf3-4862-ba06-cea9c1babfad"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b3ee5c60-ab59-4a16-b719-78fa64b7f928",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d04528c9-3f9f-4efb-aa56-652eaa3bc01b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTEyMDExNSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MSwiZXhwIjoxNzIzNzUzMzUxfQ.CF52SucpVulPFCT2yZZwNcKoEciKTR4AOqKBhh_pXoU",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27389401-1bc8-4fe1-86c9-69ec6ffe1833",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "118",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test1\",\r\n  \"description\": \"Test1\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTEyMDExNSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MSwiZXhwIjoxNzIzNzUzMzUxfQ.CF52SucpVulPFCT2yZZwNcKoEciKTR4AOqKBhh_pXoU",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c6019206-e9b1-4476-843c-067067ddc5c6",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:32 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "182"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b6-x8fsLQcGs6wf8Sc8f3anSxz9A4o\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              50,
              46,
              51,
              53,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              50,
              46,
              51,
              53,
              56,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              49,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 318,
          "responseSize": 182
        },
        "id": "c3e3e7a5-7460-47c1-8da5-8464a1cb6624",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b1caa1d-2ae8-43ee-8968-7a83775fc526",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c06ac1ad-f3b2-4f7e-b89b-6ac62429f2ac"
        },
        "item": {
          "id": "c3e3e7a5-7460-47c1-8da5-8464a1cb6624",
          "name": "[Create 1]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test1\",\r\n  \"description\": \"Test1\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69a1834a-a0dd-4dc7-a287-a406e3d73603",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5562da3f-9cf3-4862-ba06-cea9c1babfad"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b3ee5c60-ab59-4a16-b719-78fa64b7f928",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d04528c9-3f9f-4efb-aa56-652eaa3bc01b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTEyMDExNSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MSwiZXhwIjoxNzIzNzUzMzUxfQ.CF52SucpVulPFCT2yZZwNcKoEciKTR4AOqKBhh_pXoU",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27389401-1bc8-4fe1-86c9-69ec6ffe1833",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "118",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test1\",\r\n  \"description\": \"Test1\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTEyMDExNSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MSwiZXhwIjoxNzIzNzUzMzUxfQ.CF52SucpVulPFCT2yZZwNcKoEciKTR4AOqKBhh_pXoU",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c6019206-e9b1-4476-843c-067067ddc5c6",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:32 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "182"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b6-x8fsLQcGs6wf8Sc8f3anSxz9A4o\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              50,
              46,
              51,
              53,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              50,
              46,
              51,
              53,
              56,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              49,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 318,
          "responseSize": 182
        },
        "id": "c3e3e7a5-7460-47c1-8da5-8464a1cb6624",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba7af665-7871-48bf-8da1-d15b44e7088a",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c02ad563-7157-4624-9b11-d6b96c4b3aa4"
        },
        "item": {
          "id": "3d093537-4214-4e0e-8481-ae9986f02274",
          "name": "[Create 2]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "55c640c7-175f-4e7f-a1ae-809d814295e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "869495e9-1bb0-4b1c-b4d9-0766b62b815d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "930e3831-8f2d-431d-aafc-2f975cb37ae8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "37415257-9e9d-477d-a12a-541682642d5d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTI1NzQxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MiwiZXhwIjoxNzIzNzUzMzUyfQ.rZ57vXlGAmdCohyWc_kOevYonGbK7AkcTao6jax0wkQ",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "417eac1e-d053-4dd2-baa2-21a9c0dce675",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTI1NzQxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MiwiZXhwIjoxNzIzNzUzMzUyfQ.rZ57vXlGAmdCohyWc_kOevYonGbK7AkcTao6jax0wkQ",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b1a48a97-1c8d-4f38-8dcb-5ad2b7e8be94",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-8ykV/Zjg5xMuS020wfZ5/zGUlUQ\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              50,
              48,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              50,
              48,
              55,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 301,
          "responseSize": 183
        },
        "id": "3d093537-4214-4e0e-8481-ae9986f02274",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba7af665-7871-48bf-8da1-d15b44e7088a",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c02ad563-7157-4624-9b11-d6b96c4b3aa4"
        },
        "item": {
          "id": "3d093537-4214-4e0e-8481-ae9986f02274",
          "name": "[Create 2]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "55c640c7-175f-4e7f-a1ae-809d814295e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "869495e9-1bb0-4b1c-b4d9-0766b62b815d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "930e3831-8f2d-431d-aafc-2f975cb37ae8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "37415257-9e9d-477d-a12a-541682642d5d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTI1NzQxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MiwiZXhwIjoxNzIzNzUzMzUyfQ.rZ57vXlGAmdCohyWc_kOevYonGbK7AkcTao6jax0wkQ",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "417eac1e-d053-4dd2-baa2-21a9c0dce675",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTI1NzQxOCIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MiwiZXhwIjoxNzIzNzUzMzUyfQ.rZ57vXlGAmdCohyWc_kOevYonGbK7AkcTao6jax0wkQ",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b1a48a97-1c8d-4f38-8dcb-5ad2b7e8be94",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-8ykV/Zjg5xMuS020wfZ5/zGUlUQ\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              50,
              48,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              50,
              48,
              55,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 301,
          "responseSize": 183
        },
        "id": "3d093537-4214-4e0e-8481-ae9986f02274",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5b2c0fcc-9094-4a99-b51c-cad142341e54",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "02393479-d5c8-4bf5-960a-b7bbeb914c11"
        },
        "item": {
          "id": "a92ccdb2-24f3-40de-a102-f5a8590578dc",
          "name": "[Create 3]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "431f4737-8b83-467c-b7f9-95d14c4ca141",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "4c1caf31-7328-4661-80fa-0dbd91acf9a8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "74f93201-ed4d-4a3c-af8c-833390dbcb2a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "537f2922-5a49-4888-bd06-863eeb77474b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTM0MzAzMSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MywiZXhwIjoxNzIzNzUzMzUzfQ.BFLtA0VCT1rmQj2CB4PeLaWq7I4I46AIalXKtMnGN-A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bda0f826-f4ee-4814-bb6e-2fef268b72c9",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTM0MzAzMSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MywiZXhwIjoxNzIzNzUzMzUzfQ.BFLtA0VCT1rmQj2CB4PeLaWq7I4I46AIalXKtMnGN-A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a7525197-c90d-497a-9897-0188838e4162",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-nNd9iqePIxm4ivEflDVBN2LcBig\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 159,
          "responseSize": 183
        },
        "id": "a92ccdb2-24f3-40de-a102-f5a8590578dc",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5b2c0fcc-9094-4a99-b51c-cad142341e54",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "02393479-d5c8-4bf5-960a-b7bbeb914c11"
        },
        "item": {
          "id": "a92ccdb2-24f3-40de-a102-f5a8590578dc",
          "name": "[Create 3]/v1/event",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "431f4737-8b83-467c-b7f9-95d14c4ca141",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event ID is not null (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    let eventId = jsonData.id;\r",
                  "    pm.collectionVariables.set(\"eventId\", eventId);\r",
                  "    //console.log(\"eventId: \"+ eventId);\r",
                  "    pm.expect(eventId).to.not.be.null;\r",
                  "    pm.expect(eventId).to.not.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Event Name is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    let name = jsonData.name;\r",
                  "    pm.collectionVariables.set(\"name\", name);\r",
                  "    pm.expect(name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Event updated_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('updated_at');\r",
                  "    let updatedAt = jsonData.updated_at;\r",
                  "    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
                  "    pm.expect(updatedAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Event created_at is not empty (storaged)\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created_at');\r",
                  "    let createdAt = jsonData.created_at;\r",
                  "    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
                  "    pm.expect(createdAt).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Extract and store ID\", function () {\r",
                  "    let scope = pm.collectionVariables;\r",
                  "    let keyName = \"iam_events_ids\";\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    let resourceIds = JSON.parse(scope.get(keyName) || \"[]\");\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.undefined;\r",
                  "    if(jsonData.id != null & jsonData.id != undefined )\r",
                  "    {\r",
                  "    resourceIds.push(jsonData.id);\r",
                  "    scope.set(keyName, JSON.stringify(resourceIds));\r",
                  "    }\r",
                  "    else\r",
                  "    {\r",
                  "        resourceIds = resourceIds;\r",
                  "    }\r",
                  "    //console.log(\"IDSSS \" + scope.get(keyName));\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "4c1caf31-7328-4661-80fa-0dbd91acf9a8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "74f93201-ed4d-4a3c-af8c-833390dbcb2a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "537f2922-5a49-4888-bd06-863eeb77474b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTM0MzAzMSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MywiZXhwIjoxNzIzNzUzMzUzfQ.BFLtA0VCT1rmQj2CB4PeLaWq7I4I46AIalXKtMnGN-A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bda0f826-f4ee-4814-bb6e-2fef268b72c9",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"test14\",\r\n  \"description\": \"Test6\",\r\n  \"payload\": { \"name\":\"test\"},\r\n  \"status\": 1,\r\n  \"group\": \"user\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTM0MzAzMSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1MywiZXhwIjoxNzIzNzUzMzUzfQ.BFLtA0VCT1rmQj2CB4PeLaWq7I4I46AIalXKtMnGN-A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a7525197-c90d-497a-9897-0188838e4162",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "183"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"b7-nNd9iqePIxm4ivEflDVBN2LcBig\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              51,
              46,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              52,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              54,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 159,
          "responseSize": 183
        },
        "id": "a92ccdb2-24f3-40de-a102-f5a8590578dc",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Event ID is not null (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event Name is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event updated_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Event created_at is not empty (storaged)",
            "skipped": false
          },
          {
            "assertion": "Extract and store ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8715563f-f32a-4ed3-8f35-52328b0edf55",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "448bd142-22cb-4d24-bbbf-7d48bc555556"
        },
        "item": {
          "id": "9076a1e6-0923-4d0c-9324-abeb5d6e0785",
          "name": "[Update :list]/v1/event",
          "request": {
            "description": {
              "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "ql",
                  "value": "{\"id\":{\"in\":{{iam_events_ids}}}}"
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "\n{\n  \"name\": \"OnlineTest\",\n  \"description\": \"Bulk action\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"2024-04-19 06:19:50\",\n  \"group\": \"user\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d55226f0-2464-4b4e-872e-88b23b6edf90",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verifying that the names has been updated\", function () {",
                  "    if (!pm.response.responseSize) return null;",
                  "    let jsonData = pm.response.json();",
                  "    if (!jsonData) return null;",
                  "    let requestBody = pm.collectionVariables.get(\"requestBodyPut\");",
                  "    let requestBodyJson = requestBody ? JSON.parse(requestBody) : null;",
                  "    let responseName = jsonData.data.map(item => item.name);",
                  "    //console.log(\"responseName\" + responseName);",
                  "    let requestName = requestBodyJson.name",
                  "    //console.log(\"Name response\" + responseName);",
                  "    //console.log(\"Name request\" + requestName);",
                  "    let allNamesMatch = responseName.every(name => name === requestName);",
                  "    pm.expect(allNamesMatch).to.be.true;  ",
                  "});",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "   ",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "e01cbacb-ea45-45a4-b7c2-1cb785cf7b1b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "50c10a6b-e063-48b2-8a63-c076c06271f8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Obtener el body del request como un objeto\r",
                  "let requestBodyPut = pm.request.body.raw;\r",
                  "\r",
                  "// Almacenar el body en una variable de entorno (como JSON string)\r",
                  "pm.collectionVariables.set(\"requestBodyPut\", requestBodyPut);\r",
                  "\r",
                  "\r",
                  "/*let uri = pm.collectionVariables.get('base_url')\r",
                  "pm.sendRequest({\r",
                  "    url: uri + '/v1/event',\r",
                  "    method: 'POST',\r",
                  "    header: {\r",
                  "        'Content-Type': 'application/x-www-form-urlencoded'\r",
                  "    },\r",
                  "    body: {\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify({\r",
                  "            \"name\": \"test3\",\r",
                  "            \"description\": \"Test3\",\r",
                  "            \"payload\": { \"name\":\"test\"},\r",
                  "            \"status\": 1,\r",
                  "            \"group\": \"user\"\r",
                  "        })\r",
                  "    }\r",
                  "}, function (err, res) {\r",
                  "    console.log(\">>> CREATE_\");\r",
                  "    if (!res?.responseSize) return null;\r",
                  "    let jsonData = res.json();\r",
                  "    if (!jsonData) return null;\r",
                  "    jsonData?.id && pm.collectionVariables.set(\"eventId\", jsonData.id);\r",
                  "});*/\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "85bdc3ba-23f6-444d-9772-f8fcc84e6b05"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "ql",
                "value": "{%22id%22:{%22in%22:[135267,135268,135269]}}"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQwMzg5MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.GYE37IdKCjH-DlLyBJm8L2N3UQtwcr72dKu9cTMt1r8",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d011b8b-a61a-4754-adf2-e2005ded4607",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "3276",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "\n{\n  \"name\": \"OnlineTest\",\n  \"description\": \"Bulk action\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"2024-04-19 06:19:50\",\n  \"group\": \"user\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQwMzg5MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.GYE37IdKCjH-DlLyBJm8L2N3UQtwcr72dKu9cTMt1r8",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "855bbbba-1e01-45f6-b5aa-26398a3c268c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "284"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"11c-bYqJU0i/ilm5/fdVKsQ3Bu6yIkU\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 182,
          "responseSize": 284
        },
        "id": "9076a1e6-0923-4d0c-9324-abeb5d6e0785",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Verifying that the names has been updated",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8715563f-f32a-4ed3-8f35-52328b0edf55",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "448bd142-22cb-4d24-bbbf-7d48bc555556"
        },
        "item": {
          "id": "9076a1e6-0923-4d0c-9324-abeb5d6e0785",
          "name": "[Update :list]/v1/event",
          "request": {
            "description": {
              "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "ql",
                  "value": "{\"id\":{\"in\":{{iam_events_ids}}}}"
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "\n{\n  \"name\": \"OnlineTest\",\n  \"description\": \"Bulk action\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"2024-04-19 06:19:50\",\n  \"group\": \"user\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d55226f0-2464-4b4e-872e-88b23b6edf90",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verifying that the names has been updated\", function () {",
                  "    if (!pm.response.responseSize) return null;",
                  "    let jsonData = pm.response.json();",
                  "    if (!jsonData) return null;",
                  "    let requestBody = pm.collectionVariables.get(\"requestBodyPut\");",
                  "    let requestBodyJson = requestBody ? JSON.parse(requestBody) : null;",
                  "    let responseName = jsonData.data.map(item => item.name);",
                  "    //console.log(\"responseName\" + responseName);",
                  "    let requestName = requestBodyJson.name",
                  "    //console.log(\"Name response\" + responseName);",
                  "    //console.log(\"Name request\" + requestName);",
                  "    let allNamesMatch = responseName.every(name => name === requestName);",
                  "    pm.expect(allNamesMatch).to.be.true;  ",
                  "});",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "   ",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "e01cbacb-ea45-45a4-b7c2-1cb785cf7b1b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "50c10a6b-e063-48b2-8a63-c076c06271f8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Obtener el body del request como un objeto\r",
                  "let requestBodyPut = pm.request.body.raw;\r",
                  "\r",
                  "// Almacenar el body en una variable de entorno (como JSON string)\r",
                  "pm.collectionVariables.set(\"requestBodyPut\", requestBodyPut);\r",
                  "\r",
                  "\r",
                  "/*let uri = pm.collectionVariables.get('base_url')\r",
                  "pm.sendRequest({\r",
                  "    url: uri + '/v1/event',\r",
                  "    method: 'POST',\r",
                  "    header: {\r",
                  "        'Content-Type': 'application/x-www-form-urlencoded'\r",
                  "    },\r",
                  "    body: {\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify({\r",
                  "            \"name\": \"test3\",\r",
                  "            \"description\": \"Test3\",\r",
                  "            \"payload\": { \"name\":\"test\"},\r",
                  "            \"status\": 1,\r",
                  "            \"group\": \"user\"\r",
                  "        })\r",
                  "    }\r",
                  "}, function (err, res) {\r",
                  "    console.log(\">>> CREATE_\");\r",
                  "    if (!res?.responseSize) return null;\r",
                  "    let jsonData = res.json();\r",
                  "    if (!jsonData) return null;\r",
                  "    jsonData?.id && pm.collectionVariables.set(\"eventId\", jsonData.id);\r",
                  "});*/\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "85bdc3ba-23f6-444d-9772-f8fcc84e6b05"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "ql",
                "value": "{%22id%22:{%22in%22:[135267,135268,135269]}}"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQwMzg5MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.GYE37IdKCjH-DlLyBJm8L2N3UQtwcr72dKu9cTMt1r8",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d011b8b-a61a-4754-adf2-e2005ded4607",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "3276",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "\n{\n  \"name\": \"OnlineTest\",\n  \"description\": \"Bulk action\",\n  \"payload\": \"{\\\"example\\\":{\\\"method\\\":\\\"BASIC\\\",\\\"flow\\\":\\\"170834142332623\\\",\\\"username\\\":\\\"user1@example.com\\\",\\\"products\\\":{\\\"request\\\":[3]},\\\"error\\\":{\\\"short\\\":\\\"LOGIN_NOOK\\\"},\\\"fingerprint\\\":{\\\"hash\\\":\\\"18e23af4a27b0e0182fed5cbd7286be1\\\",\\\"components\\\":{\\\"useragent\\\":{\\\"product\\\":{\\\"name\\\":\\\"eWAS\\\",\\\"version\\\":\\\"3.6.1-12\\\",\\\"id\\\":3},\\\"device\\\":{\\\"id\\\":\\\"UUUU-AAAA-IIII\\\",\\\"description\\\":\\\"iPad Pro 2023 10.5inch (iPadOS 16.6)\\\"},\\\"os\\\":{\\\"name\\\":\\\"iPadOS\\\",\\\"version\\\":\\\"16.6\\\"}},\\\"acceptHeaders\\\":{\\\"accept\\\":\\\"*/*\\\"},\\\"geoip\\\":{\\\"country\\\":null},\\\"server\\\":{\\\"host\\\":\\\"localhost:4000\\\",\\\"ip\\\":\\\"localhost\\\",\\\"port\\\":\\\"4000\\\"},\\\"client\\\":{\\\"ip\\\":\\\"::1\\\",\\\"name\\\":\\\"localhost\\\",\\\"ipOriginal\\\":\\\"::1\\\"}}},\\\"failure\\\":{\\\"count\\\":5,\\\"ko_last\\\":\\\"2024-02-12T15:05:27.000Z\\\",\\\"ko_start\\\":\\\"2024-02-06T17:40:24.000Z\\\",\\\"user_id\\\":187721,\\\"ko_diff\\\":8485}},\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"method\\\":{\\\"type\\\":\\\"string\\\"},\\\"flow\\\":{\\\"type\\\":\\\"string\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\"},\\\"products\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"request\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":[{\\\"type\\\":\\\"integer\\\"}]}},\\\"required\\\":[\\\"request\\\"]},\\\"error\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"short\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"short\\\"]},\\\"fingerprint\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"hash\\\":{\\\"type\\\":\\\"string\\\"},\\\"components\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"useragent\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"product\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"},\\\"id\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\",\\\"id\\\"]},\\\"device\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"id\\\",\\\"description\\\"]},\\\"os\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"version\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"name\\\",\\\"version\\\"]}},\\\"required\\\":[\\\"product\\\",\\\"device\\\",\\\"os\\\"]},\\\"acceptHeaders\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"accept\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"accept\\\"]},\\\"geoip\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"country\\\":{\\\"type\\\":\\\"null\\\"}},\\\"required\\\":[\\\"country\\\"]},\\\"server\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"host\\\":{\\\"type\\\":\\\"string\\\"},\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"port\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"host\\\",\\\"ip\\\",\\\"port\\\"]},\\\"client\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"ip\\\":{\\\"type\\\":\\\"string\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"ipOriginal\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"ip\\\",\\\"name\\\",\\\"ipOriginal\\\"]}},\\\"required\\\":[\\\"useragent\\\",\\\"acceptHeaders\\\",\\\"geoip\\\",\\\"server\\\",\\\"client\\\"]}},\\\"required\\\":[\\\"hash\\\",\\\"components\\\"]},\\\"failure\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"count\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_last\\\":{\\\"type\\\":\\\"string\\\"},\\\"ko_start\\\":{\\\"type\\\":\\\"string\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"integer\\\"},\\\"ko_diff\\\":{\\\"type\\\":\\\"integer\\\"}},\\\"required\\\":[\\\"count\\\",\\\"ko_last\\\",\\\"ko_start\\\",\\\"user_id\\\",\\\"ko_diff\\\"]}},\\\"required\\\":[\\\"method\\\",\\\"flow\\\",\\\"username\\\",\\\"products\\\",\\\"error\\\",\\\"fingerprint\\\",\\\"failure\\\"]}}\",\n  \"status\": 1,\n  \"created_at\": \"2024-04-18 12:19:52\",\n  \"updated_at\": \"2024-04-19 06:19:50\",\n  \"group\": \"user\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQwMzg5MSIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.GYE37IdKCjH-DlLyBJm8L2N3UQtwcr72dKu9cTMt1r8",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "855bbbba-1e01-45f6-b5aa-26398a3c268c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "284"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"11c-bYqJU0i/ilm5/fdVKsQ3Bu6yIkU\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 182,
          "responseSize": 284
        },
        "id": "9076a1e6-0923-4d0c-9324-abeb5d6e0785",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Verifying that the names has been updated",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a827f824-ee23-47af-b86f-800b868cbdef",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b6e1ee1b-eb8b-4fbd-b261-e7f5e29a7d6f"
        },
        "item": {
          "id": "2521643c-0ee9-46e4-adaa-fd6484e4dad8",
          "name": "[Delete :list]/v1/event",
          "request": {
            "description": {
              "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "ql",
                  "value": "{\"id\":{\"in\":{{iam_events_ids}}}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32a8b7a3-56fc-4ed3-bccb-553a1d549a55",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "(()=>{",
                  "    if (!pm.response.responseSize) return null;",
                  "    let jsonData = pm.response.json();",
                  "    if (!jsonData) return null;",
                  "    let iam_events_ids = pm.collectionVariables.get(\"iam_events_ids\");",
                  "    let list = iam_events_ids ? JSON.parse(iam_events_ids) : null;",
                  "    if (!Array.isArray(list) || !list.length) return null;",
                  "    let ids = jsonData.data.map(item => item.id);",
                  "    let res = list.filter(item => !ids.includes(item));",
                  "    let values = JSON.stringify(res);",
                  "    pm.collectionVariables.set(\"iam_events_ids\", values);",
                  "})()",
                  ""
                ],
                "_lastExecutionId": "1a48e462-5958-4756-8070-2b53b0fae442"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c4db8e55-e0d5-494e-92b8-a7959a66dea0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d45bb573-fd68-4e6b-9047-9e5112f4d137"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "ql",
                "value": "{%22id%22:{%22in%22:[135267,135268,135269]}}"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQ2ODgwMiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.V6PYMrloKNTIbl3ddIBD1_bIoaLhYOaZKuuru-djdU0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b9392e6d-e07a-4665-aede-fcc58d0e1589",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQ2ODgwMiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.V6PYMrloKNTIbl3ddIBD1_bIoaLhYOaZKuuru-djdU0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "707c5128-c882-4a27-bd68-bdac1587484a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "284"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"11c-bYqJU0i/ilm5/fdVKsQ3Bu6yIkU\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 176,
          "responseSize": 284
        },
        "id": "2521643c-0ee9-46e4-adaa-fd6484e4dad8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a827f824-ee23-47af-b86f-800b868cbdef",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b6e1ee1b-eb8b-4fbd-b261-e7f5e29a7d6f"
        },
        "item": {
          "id": "2521643c-0ee9-46e4-adaa-fd6484e4dad8",
          "name": "[Delete :list]/v1/event",
          "request": {
            "description": {
              "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "ql",
                  "value": "{\"id\":{\"in\":{{iam_events_ids}}}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32a8b7a3-56fc-4ed3-bccb-553a1d549a55",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "(()=>{",
                  "    if (!pm.response.responseSize) return null;",
                  "    let jsonData = pm.response.json();",
                  "    if (!jsonData) return null;",
                  "    let iam_events_ids = pm.collectionVariables.get(\"iam_events_ids\");",
                  "    let list = iam_events_ids ? JSON.parse(iam_events_ids) : null;",
                  "    if (!Array.isArray(list) || !list.length) return null;",
                  "    let ids = jsonData.data.map(item => item.id);",
                  "    let res = list.filter(item => !ids.includes(item));",
                  "    let values = JSON.stringify(res);",
                  "    pm.collectionVariables.set(\"iam_events_ids\", values);",
                  "})()",
                  ""
                ],
                "_lastExecutionId": "1a48e462-5958-4756-8070-2b53b0fae442"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c4db8e55-e0d5-494e-92b8-a7959a66dea0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d45bb573-fd68-4e6b-9047-9e5112f4d137"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [
              {
                "key": "ql",
                "value": "{%22id%22:{%22in%22:[135267,135268,135269]}}"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQ2ODgwMiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.V6PYMrloKNTIbl3ddIBD1_bIoaLhYOaZKuuru-djdU0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b9392e6d-e07a-4665-aede-fcc58d0e1589",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTQ2ODgwMiIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NCwiZXhwIjoxNzIzNzUzMzU0fQ.V6PYMrloKNTIbl3ddIBD1_bIoaLhYOaZKuuru-djdU0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "707c5128-c882-4a27-bd68-bdac1587484a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "284"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"11c-bYqJU0i/ilm5/fdVKsQ3Bu6yIkU\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              56,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              54,
              57,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              110,
              108,
              105,
              110,
              101,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              117,
              108,
              107,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              103,
              114,
              111,
              117,
              112,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 176,
          "responseSize": 284
        },
        "id": "2521643c-0ee9-46e4-adaa-fd6484e4dad8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a3acc50f-4dcc-4132-86ae-da38b10a8bff",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ff13d405-79c9-4556-847c-bfcb00aab7d0"
        },
        "item": {
          "id": "5c3082d6-6afe-4402-a064-9d4804694206",
          "name": "[Cloned]/v1/event/:id",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"clonadoNewName\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebd8c356-f3fd-47d0-b99d-ccd23ad3692d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"event name was cloned correctly\", function () {\r",
                  "    if (!pm.response.responseSize) return null;\r",
                  "\r",
                  "    let jsonData = pm.response.json();\r",
                  "    if (!jsonData) return null;\r",
                  "\r",
                  "    // Obtener el cuerpo de la solicitud\r",
                  "    let requestBody = pm.collectionVariables.get(\"requestBodyPost\");\r",
                  "\r",
                  "    // Verificar si requestBody es una cadena vacía o nula\r",
                  "    if (!requestBody || requestBody.trim() === \"\") {\r",
                  "        requestBody = null;\r",
                  "    }\r",
                  "\r",
                  "    let requestBodyJson = requestBody ? JSON.parse(requestBody) : null;\r",
                  "\r",
                  "    // Obtener las nome de la respuesta, la colección, y el cuerpo de la solicitud\r",
                  "    let cloneName = jsonData.name;\r",
                  "\r",
                  "    let originName = pm.collectionVariables.get(\"name\");\r",
                  "\r",
                  "    let requestName = requestBodyJson ? requestBodyJson.name: null;\r",
                  "\r",
                  "    // Comparar los nombres según el caso\r",
                  "    if (!requestName) {\r",
                  "        pm.expect(cloneName).to.be.eql(originName);\r",
                  "    } else {\r",
                  "        pm.expect(cloneName).to.be.eql(requestName);\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "750a2a00-f90c-4a45-95f0-0d3a22304b62"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11a7403f-7e93-4f7b-bff3-2bd90d584633",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Obtener el body del request como un objeto\r",
                  "let requestBodyPost = pm.request.body.raw;\r",
                  "\r",
                  "// Almacenar el body en una variable de entorno (como JSON string)\r",
                  "pm.collectionVariables.set(\"requestBodyPost\", requestBodyPost);"
                ],
                "_lastExecutionId": "162dd2b8-37ae-4d2a-9840-5992845761e8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135269"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTUyODAxNyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NSwiZXhwIjoxNzIzNzUzMzU1fQ.2zl4h3mnhxjcXR1mjiKvIgVjJ_Ue9e61cZtNgOV0yV0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f888b258-df3e-4e66-814e-ff67e4368bec",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "32",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"clonadoNewName\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTUyODAxNyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NSwiZXhwIjoxNzIzNzUzMzU1fQ.2zl4h3mnhxjcXR1mjiKvIgVjJ_Ue9e61cZtNgOV0yV0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "faa35038-bcfe-4c6e-b9dd-15021f8617ed",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "128"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"80-G4FkQF0lQqQmoOiFyToOb1BZp+w\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              53,
              46,
              55,
              55,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              53,
              46,
              55,
              55,
              51,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              55,
              48,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              99,
              108,
              111,
              110,
              97,
              100,
              111,
              78,
              101,
              119,
              78,
              97,
              109,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 325,
          "responseSize": 128
        },
        "id": "5c3082d6-6afe-4402-a064-9d4804694206",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "event name was cloned correctly",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a3acc50f-4dcc-4132-86ae-da38b10a8bff",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ff13d405-79c9-4556-847c-bfcb00aab7d0"
        },
        "item": {
          "id": "5c3082d6-6afe-4402-a064-9d4804694206",
          "name": "[Cloned]/v1/event/:id",
          "request": {
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "event",
                "{{eventId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"clonadoNewName\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebd8c356-f3fd-47d0-b99d-ccd23ad3692d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"event name was cloned correctly\", function () {\r",
                  "    if (!pm.response.responseSize) return null;\r",
                  "\r",
                  "    let jsonData = pm.response.json();\r",
                  "    if (!jsonData) return null;\r",
                  "\r",
                  "    // Obtener el cuerpo de la solicitud\r",
                  "    let requestBody = pm.collectionVariables.get(\"requestBodyPost\");\r",
                  "\r",
                  "    // Verificar si requestBody es una cadena vacía o nula\r",
                  "    if (!requestBody || requestBody.trim() === \"\") {\r",
                  "        requestBody = null;\r",
                  "    }\r",
                  "\r",
                  "    let requestBodyJson = requestBody ? JSON.parse(requestBody) : null;\r",
                  "\r",
                  "    // Obtener las nome de la respuesta, la colección, y el cuerpo de la solicitud\r",
                  "    let cloneName = jsonData.name;\r",
                  "\r",
                  "    let originName = pm.collectionVariables.get(\"name\");\r",
                  "\r",
                  "    let requestName = requestBodyJson ? requestBodyJson.name: null;\r",
                  "\r",
                  "    // Comparar los nombres según el caso\r",
                  "    if (!requestName) {\r",
                  "        pm.expect(cloneName).to.be.eql(originName);\r",
                  "    } else {\r",
                  "        pm.expect(cloneName).to.be.eql(requestName);\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "750a2a00-f90c-4a45-95f0-0d3a22304b62"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11a7403f-7e93-4f7b-bff3-2bd90d584633",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Obtener el body del request como un objeto\r",
                  "let requestBodyPost = pm.request.body.raw;\r",
                  "\r",
                  "// Almacenar el body en una variable de entorno (como JSON string)\r",
                  "pm.collectionVariables.set(\"requestBodyPost\", requestBodyPost);"
                ],
                "_lastExecutionId": "162dd2b8-37ae-4d2a-9840-5992845761e8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "event",
              "135269"
            ],
            "host": [
              "auth-dev",
              "qa",
              "ewas",
              "aero"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTUyODAxNyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NSwiZXhwIjoxNzIzNzUzMzU1fQ.2zl4h3mnhxjcXR1mjiKvIgVjJ_Ue9e61cZtNgOV0yV0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f888b258-df3e-4e66-814e-ff67e4368bec",
              "system": true
            },
            {
              "key": "Host",
              "value": "auth-dev.qa.ewas.aero",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "32",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "stickiness=1723321345.262.214.915178|763bccbcfbedfe0481a2c9c7340fc2f7; auth.api=s%3AIMtQ9DWrzTL0cAuGiy6QbIqgdTbe681V.U3i3N%2FyiRKBewQzLX6BoO6d0Q2NPeN2CbEUPF5kUkCE",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"clonadoNewName\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiZmxvdyI6IjE3MjMzMjEzNTUyODAxNyIsInVzZXIiOjI1NTIzNCwicHJvZHVjdHMiOls2XSwidXNyIjp7InVzZXJJZCI6MjU1MjM0LCJmaXJzdE5hbWUiOiJBbnRvbmlvIn0sImlhdCI6MTcyMzMyMTM1NSwiZXhwIjoxNzIzNzUzMzU1fQ.2zl4h3mnhxjcXR1mjiKvIgVjJ_Ue9e61cZtNgOV0yV0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "faa35038-bcfe-4c6e-b9dd-15021f8617ed",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 10 Aug 2024 20:22:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "128"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"80-G4FkQF0lQqQmoOiFyToOb1BZp+w\""
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'self'"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              49,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              53,
              46,
              55,
              55,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              49,
              48,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              51,
              53,
              46,
              55,
              55,
              51,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              51,
              53,
              50,
              55,
              48,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              99,
              108,
              111,
              110,
              97,
              100,
              111,
              78,
              101,
              119,
              78,
              97,
              109,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 325,
          "responseSize": 128
        },
        "id": "5c3082d6-6afe-4402-a064-9d4804694206",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "event name was cloned correctly",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 71179
    },
    "failures": [],
    "error": null
  }
}